This is chrony.info, produced by makeinfo version 4.3 from chrony.texi.

INFO-DIR-SECTION Net Utilities
START-INFO-DIR-ENTRY
* chrony: (chrony).			How to use chronyd and chronyc
* chronyd: (chrony)Starting chronyd.	Reference for chronyd
* chronyc: (chrony)Running chronyc.	Reference for chronyc
END-INFO-DIR-ENTRY


File: chrony.info,  Node: add peer command,  Next: add server command,  Prev: activity command,  Up: Chronyc command reference

add peer
........

   The `add peer' command allows a new NTP peer to be added whilst
`chronyd' is running.

   Following the words `add peer', the syntax of the following
parameters and options is identical to that for the `peer' directive in
the configuration file (*note peer directive::).

   An example of using this command is shown below.

     add peer foo.bar.com minpoll 6 maxpoll 10 authkey 25


File: chrony.info,  Node: add server command,  Next: allow command,  Prev: add peer command,  Up: Chronyc command reference

add server
..........

   The `add server' command allows a new NTP server to be added whilst
`chronyd' is running.

   Following the words `add server', the syntax of the following
parameters and options is identical to that for the `server' directive
in the configuration file (*note server directive::).

   An example of using this command is shown below.

     add server foo.bar.com minpoll 6 maxpoll 10 authkey 25


File: chrony.info,  Node: allow command,  Next: allow all command,  Prev: add server command,  Up: Chronyc command reference

allow
.....

   The effect of the allow command is identical to the `allow'
directive in the configuration file (*note allow directive::).

   The syntax is illustrated in the following examples:

     allow foo.bar.com
     allow 1.2
     allow 3.4.5
     allow 6.7.8/22
     allow 6.7.8.9/22
     allow

   The effect of each of these examples is the same as that of the
`allow' directive in the configuration file.


File: chrony.info,  Node: allow all command,  Next: burst command,  Prev: allow command,  Up: Chronyc command reference

allow all
.........

   The effect of the allow command is identical to the `allow all'
directive in the configuration file (*note allow directive::).


File: chrony.info,  Node: burst command,  Next: clients command,  Prev: allow all command,  Up: Chronyc command reference

burst
.....

   The `burst' command tells `chronyd' to make a set of measurements to
each of its sources over a short duration (rather than the usual
periodic measurements that it makes).  After such a burst, `chronyd'
will revert to the previous state for each source.  This might be either
online, if the source was being periodically measured in the normal way,
or offline, if the source had been indicated as being offline.
(Switching a source between the online and offline states is described
in *Note online command::, *Note offline command::).

   The syntax of the burst command is as follows

     burst <n-good-measurements>/<max-measurements> [<mask>/<masked-address>]

   The mask and masked-address arguments are optional, in which case
`chronyd' will initiate a burst for all of its currently defined
sources.

   The arguments have the following meaning and format.

`n-good-measurements'
     This defines the number of good measurements that `chronyd' will
     want to obtain from each source.  A measurement is good if it
     passes certain tests, for example, the round trip time to the
     source must be acceptable.  (This allows `chronyd' to reject
     measurements that are likely to be bogus.)

`max-measurements'
     This defines the maximum number of measurements that `chronyd' will
     attempt to make, even if the required number of good measurements
     has not been obtained.

`mask'
     This is a dotted quad argument (e.g. `255.255.255.0') with which
     the IP address of each of `chronyd''s sources is to be masked.

`masked-address'
     This is a dotted quad argument (e.g. `1.2.3.0').  If the masked IP
     address of a source matches this value then the burst command is
     applied to that source.

   If no mask or masked address arguments are provided, the default is
`0.0.0.0' and `0.0.0.0' respectively, which will match every source.

   An example of the two-argument form of the command is

     burst 2/10

   This will cause `chronyd' to attempt to get two good measurements
from each source, stopping after two have been obtained, but in no
event will it try more than ten probes to the source.

   An example of the four-argument form of the command is

     burst 2/10 255.255.0.0/1.2.0.0

   In this case, the two out of ten sampling will only be applied to
sources whose IP addresses are of the form `1.2.x.y', where x and y are
arbitrary.


File: chrony.info,  Node: clients command,  Next: cmdaccheck command,  Prev: burst command,  Up: Chronyc command reference

clients
.......

   This command shows a list of all clients that have accessed the
server, through either the NTP or command/monitoring ports.  There are
no arguments.

   An example of the output is

     Hostname                   Client    Peer CmdAuth CmdNorm  CmdBad  LstN  LstC
     =========================  ======  ======  ======  ======  ======  ====  ====
     localhost                       0       0      15       1       0   29y     0
     aardvark.xxx                    4       0       0       0       0    49   29y
     badger.xxx                      4       0       0       0       0     6   29y

   Each row shows the data for a single host.  Only hosts that have
passed the host access checks (set with the `allow', `deny', `cmdallow'
and `cmddeny' commands or configuration file directives) are logged.

   The columns are as follows:

  1. The hostname of the client

  2. The number of times the client has accessed the server using an NTP
     client mode packet.

  3. The number of times the client has accessed the server using an NTP
     symmetric active mode packet.

  4. The number of authenticated command packets that have been
     processed from the client (i.e. those following a successful
     `password' command).

  5. The number of unauthenticated command packets that have been
     processed from the client.

  6. The number of bad command packets received from the client (not all
     forms of bad packet are logged).

  7. Time since the last NTP packet was received

  8. Time since the last command packet was received

   The last two entries will be shown as the time since 1970 if no
packet of that type has ever been received.


File: chrony.info,  Node: cmdaccheck command,  Next: cmdallow command,  Prev: clients command,  Up: Chronyc command reference

cmdaccheck
..........

   This command is similar to the `accheck' command, except that it is
used to check whether command access is permitted from a named host.

   Examples of use are as follows:

     cmdaccheck a.b.c
     cmdaccheck 1.2.3.4


File: chrony.info,  Node: cmdallow command,  Next: cmdallow all command,  Prev: cmdaccheck command,  Up: Chronyc command reference

cmdallow
........

   This is similar to the `allow' command, except that it is used to
allow particular hosts or subnets to use the chronyc program to interact
with `chronyd' on the current host.


File: chrony.info,  Node: cmdallow all command,  Next: cmddeny command,  Prev: cmdallow command,  Up: Chronyc command reference

cmdallow all
............

   This is similar to the `allow all' command, except that it is used
toallow particular hosts or subnets to use the chronyc program to
interactwith `chronyd' on the current host.


File: chrony.info,  Node: cmddeny command,  Next: cmddeny all command,  Prev: cmdallow all command,  Up: Chronyc command reference

cmddeny
.......

   This is similar to the `deny' command, except that it is used to
allow particular hosts or subnets to use the chronyc program to interact
with `chronyd' on the current host.


File: chrony.info,  Node: cmddeny all command,  Next: cyclelogs command,  Prev: cmddeny command,  Up: Chronyc command reference

cmddeny all
...........

   This is similar to the `deny all' command, except that it is used to
allow particular hosts or subnets to use the chronyc program to
interact with `chronyd' on the current host.


File: chrony.info,  Node: cyclelogs command,  Next: delete command,  Prev: cmddeny all command,  Up: Chronyc command reference

cyclelogs
.........

   The `cyclelogs' command causes all of `chronyd's' open log files to
be closed and re-opened.  This allows them to be renamed so that they
can be periodically purged.  An example of how to do this is shown
below.

     % mv /var/log/chrony/measurements.log /var/log/chrony/measurements1.log
     % chronyc
     chronyc> password aardvark
     200 OK
     chronyc> cyclelogs
     200 OK
     chronyc> exit
     % ls -l /var/log/chrony
     -rw-r--r--   1 root     root            0 Jun  8 18:17 measurements.log
     -rw-r--r--   1 root     root        12345 Jun  8 18:17 measurements1.log
     % rm -f measurements1.log


File: chrony.info,  Node: delete command,  Next: deny command,  Prev: cyclelogs command,  Up: Chronyc command reference

delete
......

   The `delete' command allows an NTP server or peer to be removed from
the current set of sources.

   The syntax is illustrated in the examples below.

     delete foo.bar.com
     delete 1.2.3.4

   There is one parameter, the name or IP address of the server or peer
to be deleted.


File: chrony.info,  Node: deny command,  Next: deny all command,  Prev: delete command,  Up: Chronyc command reference

deny
....

   The effect of the allow command is identical to the `deny' directive
in the configuration file (*note deny directive::).

   The syntax is illustrated in the following examples:

     deny foo.bar.com
     deny 1.2
     deny 3.4.5
     deny 6.7.8/22
     deny 6.7.8.9/22
     deny


File: chrony.info,  Node: deny all command,  Next: dump command,  Prev: deny command,  Up: Chronyc command reference

deny all
........

   The effect of the allow command is identical to the `deny all'
directive in the configuration file (*note deny directive::).


File: chrony.info,  Node: dump command,  Next: exit command,  Prev: deny all command,  Up: Chronyc command reference

dump
....

   The `dump' command causes `chronyd' to write its current history of
measurements for each of its sources to dump files, either for
inspection or to support the `-r' option when `chronyd' is restarted.

   The `dump' command is somewhat equivalent to the `dumponexit'
directive in the chrony configuration file.  *Note dumponexit
directive::.

   To use the `dump', you probably want to configure the name of the
directory into which the dump files will be written.  This can only be
done in the configuration file, see *Note dumpdir directive::.


File: chrony.info,  Node: exit command,  Next: help command,  Prev: dump command,  Up: Chronyc command reference

exit
....

   The exit command exits from chronyc and returns the user to the shell
(same as the quit command).


File: chrony.info,  Node: help command,  Next: local command,  Prev: exit command,  Up: Chronyc command reference

help
....

   The help command displays a summary of the commands and their
arguments.


File: chrony.info,  Node: local command,  Next: makestep command,  Prev: help command,  Up: Chronyc command reference

local
.....

   The `local' command allows `chronyd' to be told that it is to appear
as a reference source, even if it is not itself properly synchronised to
an external source.  (This can be used on isolated networks, to allow
one computer to be a master time server with the other computers slaving
to it.)  The `local' command is somewhat equivalent to the `local'
directive in the configuration file, see *Note local directive::.

   The syntax is as shown in the following examples.

     local stratum 10
     local off

   The first example enables the local reference mode on the host, and
sets the stratum at which it should claim to be synchronised.

   The second example disables the local reference mode.


File: chrony.info,  Node: makestep command,  Next: manual command,  Prev: local command,  Up: Chronyc command reference

makestep
........

   Normally chronyd will cause the system to gradually correct any time
offset, by slowing down or speeding up the clock as required.  In
certain situations, the system clock may be so far adrift that this
slewing process would take a very long time to correct the system clock.

   The `makestep' command can be used in this situation.  It cancels
any remaining correction that was being slewed, and jumps the system
clock by the equivalent amount, making it correct immediately.

   BE WARNED - certain software will be seriously affected by such
jumps to the system time.  (That is the reason why chronyd uses slewing
normally.)

   The `makestep' command is currently only available on the Linux
version of chrony.


File: chrony.info,  Node: manual command,  Next: maxdelay command,  Prev: makestep command,  Up: Chronyc command reference

manual
......

   The manual command enables and disables use of the `settime' command
(*note settime command::), and is used to modify the behaviour of the
manual clock driver.

   Examples of the command are shown below.

     manual on
     manual off
     manual delete 1
     manual list
     manual reset

   The `on' form of the command enables use of the `settime' command.

   The `off' form of the command disables use of the `settime' command.

   The `list' form of the command lists all the samples currently
stored in `chronyd'.  The output is illustrated below.

     210 n_samples = 1
     #    Date  Time(UTC)    Slewed   Original   Residual
     ====================================================
      0 27Jan99 22:09:20       0.00       0.97       0.00

   The columns as as follows :

  1. The sample index (used for the `manual delete' command)

  2. The date and time of the sample

  3. The system clock error when the timestamp was entered, adjusted to
     allow for changes made to the system clock since.

  4. The system clock error when the timestamp was entered, as it
     originally was (without allowing for changes to the system clock
     since).

  5. The regression residual at this point, in seconds.  This allows
     'outliers' to be easily spotted, so that they can be deleted using
     the `manual delete' command.

   The `delete' form of the command deletes a single sample.  The
parameter is the index of the sample, as shown in the first column of
the output from `manual list'.  Following deletion of the data point,
the current error and drift rate are re-estimated from the remaining
data points and the system clock trimmed if necessary.  This option is
intended to allow 'outliers' to be discarded, i.e. samples where the
administrator realises he/she has entered a very poor timestamp.

   The `reset' form of the command deletes all samples at once.  The
system clock is left running as it was before the command was entered.


File: chrony.info,  Node: maxdelay command,  Next: maxdelayratio command,  Prev: manual command,  Up: Chronyc command reference

maxdelay
........

   This allows the `maxdelay' option for one of the sources to be
modified, in the same way as specifying the `maxdelay' option for the
`server' directive in the configuration file (*note server directive::).

   The following examples illustrate the syntax

     maxdelay foo.bar.com 0.3
     maxdelay 1.2.3.4 0.0015

   The first example sets the maximum network delay allowed for a
measurement to the host `foo.bar.com' to 0.3 seconds.  The second
example sets the maximum network delay for a measurement to the host
with IP address `1.2.3.4' to 1.5 milliseconds.

   (Any measurement whose network delay exceeds the specified value is
discarded.)


File: chrony.info,  Node: maxdelayratio command,  Next: maxpoll command,  Prev: maxdelay command,  Up: Chronyc command reference

maxdelayratio
.............

   This allows the `maxdelayratio' option for one of the sources to be
modified, in the same way as specifying the `maxdelayratio' option for
the `server' directive in the configuration file (*note server
directive::).

   The following examples illustrate the syntax

     maxdelayratio foo.bar.com 1.5
     maxdelayratio 1.2.3.4 2.0

   The first example sets the maximum network delay for a measurement to
the host `foo.bar.com' to be 1.5 times the minimum delay found amongst
the previous measurements that have been retained.  The second example
sets the maximum network delay for a measurement to the host with IP
address `1.2.3.4' to be double the retained minimum.

   As for `maxdelay', any measurement whose network delay is too large
will be discarded.


File: chrony.info,  Node: maxpoll command,  Next: maxupdateskew command,  Prev: maxdelayratio command,  Up: Chronyc command reference

maxpoll
.......

   The `maxpoll' command is used to modify the minimum polling interval
for one of the current set of sources.  It is equivalent to the
`maxpoll' option in the `server' directive in the configuration file
(*note server directive::).

   The syntax is as follows

     maxpoll <host> <new-maxpoll>

   where the host can be specified as either a machine name or
dotted-quad IP address.  The new minimum poll is specified as a base-2
logarithm of the number of seconds between polls (e.g. specify 6 for 64
second sampling).

   An example is

     maxpoll foo.bar.com 10

   which sets the maximum polling interval for the host `foo.bar.com'
to 1024 seconds.

   Note that the new maximum polling interval only takes effect after
the next measurement has been made.


File: chrony.info,  Node: maxupdateskew command,  Next: minpoll command,  Prev: maxpoll command,  Up: Chronyc command reference

maxupdateskew
.............

   This command has the same effect as the `maxupdateskew' directive in
the configuration file, see *Note maxupdateskew directive::.


File: chrony.info,  Node: minpoll command,  Next: offline command,  Prev: maxupdateskew command,  Up: Chronyc command reference

minpoll
.......

   The `minpoll' command is used to modify the minimum polling interval
for one of the current set of sources.  It is equivalent to the
`minpoll' option in the `server' directive in the configuration file
(*note server directive::).

   The syntax is as follows

     minpoll <host> <new-minpoll>

   where the host can be specified as either a machine name or
dotted-quad IP address.  The new minimum poll is specified as a base-2
logarithm of the number of seconds between polls (e.g. specify 6 for 64
second sampling).

   An example is

     minpoll foo.bar.com 5

   which sets the minimum polling interval for the host `foo.bar.com'
to 32 seconds.

   Note that the new minimum polling interval only takes effect after
the next measurement has been made.


File: chrony.info,  Node: offline command,  Next: online command,  Prev: minpoll command,  Up: Chronyc command reference

offline
.......

   The `offline' command is used to warn `chronyd' that the network
connection to a particular host or hosts is about to be lost.  It should
be used on computers with a dial-up or similar connection to their time
sources, to warn `chronyd' that the connection is about to be broken.

   An example of how to use `offline' in this case is shown in *Note
Advising chronyd of internet availability::.

   Another case where `offline' could be used is where a computer
serves time to a local group of computers, and has a permanant
connection to true time servers outside the organisation.  However, the
external connection is heavily loaded at certain times of the day and
the measurements obtained are less reliable at those times.  In this
case, it is probably most useful to determine the gain/loss rate during
the quiet periods and let the whole network coast through the loaded
periods.  The `offline' and `online' commands can be used to achieve
this.  The situation is shown in the figure below.

               +----------+
               |Ext source|
               +----------+
                   |
                   |
                   |/| <-- Link with variable
                     |     reliability
                     |
           +-------------------+
           |Local master server|
           +-------------------+
                     |
       +---+---+-----+-----+----+----+
       |   |   |     |     |    |    |
                Local clients

   If the source to which `chronyd' is currently synchronised is
indicated offline in this way, `chronyd' will continue to treat it as
the synchronisation source.  If the network connection were broken
without the `offline' command being used, `chronyd' would assume that
the source had failed and would attempt to pick another synchronisation
source.

   There are two forms of the `offline' command.  The first form is a
wildcard, meaning all sources.  The second form allows a IP address mask
and a masked address to be specified.  These forms are illustrated
below.

     offline
     offline 255.255.255.0/1.2.3.0

   The second form means that the `offline' command is to be applied to
any source whose IP address is in the 1.2.3 subnet.  (The host's
address is logically and-ed with the mask, and if the result matches the
masked-address the host is processed).

   The wildcard form of the address is actually equivalent to

     offline 0.0.0.0/0.0.0.0


File: chrony.info,  Node: online command,  Next: password command,  Prev: offline command,  Up: Chronyc command reference

online
......

   The `online' command is opposite in function to the `offline'
command.  It is used to advise `chronyd' that network connectivity to a
particular source or sources has been restored.

   The syntax is identical to that of the `offline' command, see *Note
offline command::.


File: chrony.info,  Node: password command,  Next: quit command,  Prev: online command,  Up: Chronyc command reference

password
........

   The password command is used to allow chronyc to send privileged
commands to `chronyd'.  The password can either be entered on the
command line, or can be entered without echoing.  The syntax for
entering the password on the command line is as follows

     password xyzzy

   To enter the password without it being echoed, enter

     password

   The computer will respond with a `Password:' prompt, at which you
should enter the password and press return.  (Note that the no-echo mode
is limited to 8 characters on SunOS 4.1 due to limitations in the system
library.  Other systems do not have this restriction.)

   The password is any string of characters not containing whitespace.
It has to match `chronyd's' currently defined command key (*note
commandkey directive::).


File: chrony.info,  Node: quit command,  Next: rtcdata command,  Prev: password command,  Up: Chronyc command reference

quit
....

   The quit command exits from chronyc and returns the user to the shell
(same as the exit command).


File: chrony.info,  Node: rtcdata command,  Next: settime command,  Prev: quit command,  Up: Chronyc command reference

rtcdata
.......

   The `rtcdata' command displays the current real time clock RTC
parameters.

   An example output is shown below.

     RTC ref time (GMT) : Sat May 30 07:25:56 1998
     Number of samples  : 10
     Number of runs     : 5
     Sample span period :  549
     RTC is fast by     :    -1.632736 seconds
     RTC gains time at  :  -107.623 ppm

   The fields have the following meaning

`RTC ref time (GMT)'
     This is the RTC reading the last time its error was measured.

`Number of samples'
     This is the number of previous measurements being used to
     determine the RTC gain/loss rate.

`Number of runs'
     This is the number of runs of residuals of the same sign following
     the regression fit for (RTC error) versus (RTC time).  A value
     which is small indicates that the measurements are not well
     approximated by a linear model, and that the algorithm will tend
     to delete the older measurements to improve the fit.

`Sample span period'
     This is the period that the measurements span (from the oldest to
     the newest).  Without a unit the value is in seconds; suffixes `m'
     for minutes, `h' for hours, `d' for days or `y' for years may be
     used.

`RTC is fast by'
     This is the estimate of how many seconds fast the RTC when it
     thought the time was at the reference time (above).  If this value
     is large, you may (or may not) want to use the `trimrtc' command
     to bring the RTC into line with the system clock.  (Note, a large
     error will not affect `chronyd's' operation, unless it becomes so
     big as to start causing rounding errors.

`RTC gains time at'
     This is the amount of time gained (positive) or lost (negative) by
     the real time clock for each second that it ticks.  It is measured
     in parts per million.  So if the value shown was +1, suppose the
     RTC was exactly right when it crosses a particular second
     boundary.  Then it would be 1 microsecond fast when it crosses its
     next second boundary.


File: chrony.info,  Node: settime command,  Next: sources command,  Prev: rtcdata command,  Up: Chronyc command reference

settime
.......

   The `settime' command allows the current time to be entered
manually, if this option has been configured into `chronyd'.  (It may be
configured either with the `manual' directive in the configuration file
(*note manual directive::), or with the `manual' command of chronyc
(*note manual command::).

   It should be noted that the computer's sense of time will only be as
accurate as the reference you use for providing this input (e.g. your
watch), as well as how well you can time the press of the return key.
When inputting time to an isolated network, I have a battery operated
alarm clock that is synchronised to the Rugby MSF time signal in the UK.

   Providing your computer's time zone is set up properly, you will be
able to enter a local time (rather than UTC).

   The response to a successful `settime' command indicates the amount
that the computer's clock was wrong.  It should be apparent from this if
you have entered the time wrongly, e.g. with the wrong time zone.

   The rate of drift of the system clock is estimated by a regression
process using the entered measurement and all previous measurements
entered during the present run of `chronyd'.  However, the entered
measurement is used for adjusting the current clock offset (rather than
the estimated intercept from the regression, which is ignored).
Contrast what happens with the `manual delete' command, where the
intercept is used to set the current offset (since there is no
measurement that has just been typed in in that case).

   The time is parsed by the public domain `getdate' algorithm.
Consequently, you can only specify time to the nearest second.

   Examples of inputs that are valid are shown below.

     settime 16:30
     settime 16:30:05
     settime Nov 21, 1997 16:30:05

   For a full description of `getdate', get hold of the getdate
documentation (bundled, for example, with the source for GNU tar).


File: chrony.info,  Node: sources command,  Next: sourcestats command,  Prev: settime command,  Up: Chronyc command reference

sources
.......

   This command displays information about the current time sources that
`chronyd' is accessing.

   The optional argument `-v' can be specified, meaning _verbose_.  In
this case, extra caption lines are shown as a reminder of the meanings
of the columns.

     210 Number of sources = 3
     MS Name/IP address      Stratum Poll LastRx Last sample
     =======================================================================
     ^+ a.b.c                    3     6    47m  -9491us[-6983us] +/-  159ms
     ^+ d.e.f                    3     6    47m    +32ms[  +35ms] +/-  274ms
     ^* g.h.i                    2     6    47m  +8839us[  +11ms] +/-  214ms

   The columns are as follows:

`M'
     This indicates the mode of the source.  `^' means a server, `='
     means a peer and `#' indicates a locally connected reference
     clock(1).

`S'
     This column indicates the state of the sources.  `*' indicates the
     source to which `chronyd' is current synchronised.  `+' indicates
     other acceptable sources.  `?' indicates sources to which
     connectivity has been lost.  `x' indicates a clock which `chronyd'
     thinks is is a falseticker (i.e. its time is inconsistent with a
     majority of other sources).  `~' indicates a source whose time
     appears to have too much variability.  The `~' condition is also
     shown at start-up, until at least 3 samples have been gathered
     from it.

`Name/IP address'
     This shows the name or the IP address of the source.

`Stratum'
     This shows the stratum of the source, as reported in its most
     recently received sample.  Stratum 1 indicates a computer with a
     locally attached reference clock.  A computer that is synchronised
     to a stratum 1 computer is at stratum 2.  A computer that is
     synchronised to a stratum 2 computer is at stratum 3, and so on.

`Poll'
     This shows the rate at which the source is being polled, as a
     base-2 logarithm of the interval in seconds.  Thus, a value of 6
     would indicate that a measurement is being made every 64 seconds.

     `chronyd' automatically varies the polling rate in response to
     prevailing conditions.

`LastRx'
     This column shows how long ago the last sample was received from
     the source.  This is normally in seconds.  The letters `m', `h',
     `d' or `y' indicate minutes, hours, days or years.

`Last sample'
     This column shows the offset between the local clock and the
     source at the last measurement.  The number in the square brackets
     shows the actual measured offset.  This may be suffixed by `us'
     (indicating microseconds), `ms' (indicating milliseconds), or `s'
     (indicating seconds).  The number to the left of the square
     brackets shows the original measurement, adjusted to allow for any
     slews applied to the local clock since.  The number following the
     `+/-' indicator shows the margin of error in the measurement.

     Positive offsets indicate that the local clock is fast of the
     source.

   ---------- Footnotes ----------

   (1) In the current version this will never be shown, because
`chronyd' has no support for reference clocks yet.


File: chrony.info,  Node: sourcestats command,  Next: tracking command,  Prev: sources command,  Up: Chronyc command reference

sourcestats
...........

   The `sourcestats' command displays information about the drift rate
and offset estimatation process for each of the sources currently being
examined by `chronyd'.

   The optional argument `-v' can be specified, meaning _verbose_.  In
this case, extra caption lines are shown as a reminder of the meanings
of the columns.

   An example report is

     210 Number of sources = 1
     Name/IP Address            NP  NR  Span  Frequency   Freq Skew   Std Dev
     ========================================================================
     abc.def.ghi                11   5   46m      -0.001       0.045     25us

   The columns are as follows

`Name/IP Address'
     This is the name or dotted-quad IP address of the NTP server (or
     peer) to which the rest of the line relates.

`NP'
     This is the number of sample points currently being retained for
     the server.  The drift rate and current offset are estimated by
     performing a linear regression through these points.

`NR'
     This is the number of runs of residuals having the same sign
     following the last regression.  If this number starts to become
     too small relative to the number of samples, it indicates that a
     straight line is no longer a good fit to the data.  If the number
     of runs is too low, `chronyd' discards older samples and re-runs
     the regression until the number of runs becomes acceptable.

`Span'
     This is the interval between the oldest and newest samples.  If no
     unit is shown the value is in seconds.  In the example, the
     interval is 46 minutes.

`Frequency'
     This is the estimated residual frequency for the server, in parts
     per million.  In this case, the computer's clock is estimated to
     be running 1 part in 10**9 slow relative to the server.

`Freq Skew'
     This is the estimated error bounds on `Freq' (again in parts per
     million).

`Std Dev'
     This is the estimated sample standard deviation.


File: chrony.info,  Node: tracking command,  Next: trimrtc command,  Prev: sourcestats command,  Up: Chronyc command reference

tracking
........

   The `tracking' command displays parameters about the system's clock
performance.  An example of the output is shown below.

     Reference ID    : 1.2.3.4 (a.b.c)
     Stratum         : 3
     Ref time (UTC)  : Sun May 17 06:13:11 1998
     System time     : 0.000000 seconds fast of NTP time
     Frequency       : 331.898 ppm fast
     Residual freq   : 0.004 ppm
     Skew            : 0.154 ppm
     Root delay      : 0.373169 seconds
     Root dispersion : 0.024780 seconds

   The fields are explained as follows.

`Reference ID'
     This is the IP address, and name if available, of the server to
     which the computer is currently synchronised.  If this is
     `127.127.1.1' it means the computer is not synchronised to any
     external source and that you have the `local' mode operating (via
     the `local' command in `chronyc' (*note local command::), or the
     `local' directive in the `/etc/chrony.conf' file (*note local
     directive::)).

`Stratum'
     The stratum indicates how many hops away from a computer with an
     attached reference clock we are.  Such a computer is a stratum-1
     computer, so the computer in the example is two hops away (i.e.
     `a.b.c' is a stratum-2 and is synchronised from a stratum-1).

`Ref time'
     This is the time (GMT) at which the last measurement from the
     reference source was processed.

`System time'
     In normal operation, `chronyd' _never_ steps the system clock,
     because any jump in the timescale can have adverse consequences for
     certain application programs.  Instead, any error in the system
     clock is corrected by slightly speeding up or slowing down the
     system clock until the error has been removed, and then returning
     to the system clock's normal speed.  A consequence of this is that
     there will be a period when the system clock (as read by other
     programs using the `gettimeofday()' system call, or by the `date'
     command in the shell) will be different from `chronyd's' estimate
     of the current true time (which it reports to NTP clients when it
     is operating in server mode).  The value reported on this line is
     the difference due to this effect.

     On systems such as Solaris and SunOS, `chronyd' has no means to
     adjust the fundamental rate of the system clock, so keeps the
     system time correct by periodically making offsets to it as though
     an error had been measured.  The build up of these offsets will be
     observed in this report.  On systems such as Linux where `chronyd'
     can adjust the fundamental rate of the system clock, this value
     will show zero unless a very recent measurement has shown the
     system to be error.

`Frequency'
     The `frequency' is the rate by which the system's clock would be
     would be wrong if `chronyd' was not correcting it.  It is
     expressed in ppm (parts per million).  For example, a value of
     1ppm would mean that when the system's clock thinks it has
     advanced 1 second, it has actually advanced by 1.000001 seconds
     relative to true time.

     As you can see in the example, the clock in the computer I
     developed `chrony' on is not a very good one - it gains about 30
     seconds per day!  This was the reason I started to write `chrony'
     in the first place.

`Residual freq'
     This shows the `residual frequency' for the currently selected
     reference source.  This reflects any difference between what the
     measurements from the reference source indicate the frequency
     should be and the frequency currently being used.

     The reason this is not always zero is that a smoothing procedure is
     applied to the frequency.  Each time a measurement from the
     reference source is obtained and a new residual frequency
     computed, the estimated accuracy of this residual is compared with
     the estimated accuracy (see `skew' next) of the existing frequency
     value.  A weighted average is computed for the new frequency, with
     weights depending on these accuracies.  If the measurements from
     the reference source follow a consistent trend, the residual will
     be driven to zero over time.

`Skew'
     This is the estimated error bound on the the frequency.

`Root delay'
     This is the total of the network path delays to the stratum-1
     computer from which the computer is ultimately synchronised.

     In certain extreme situations, this value can be negative.  (This
     can arise in a symmetric peer arrangement where the computers'
     frequencies are not tracking each other and the network delay is
     very short relative to the turn-around time at each computer.)

`Root dispersion'
     This is the total dispersion accumulated through all the computers
     back to the stratum-1 computer from which the computer is
     ultimately synchronised.  Dispersion is due to system clock
     resolution, statistical measurement variations etc.

     An absolute bound on the computer's clock accuracy (assuming the
     stratum-1 computer is correct) is given by

          clock_error <= root_dispersion + (0.5 * |root_delay|)


File: chrony.info,  Node: trimrtc command,  Next: writertc command,  Prev: tracking command,  Up: Chronyc command reference

trimrtc
.......

   The `trimrtc' command is used to correct the system's real time
clock (RTC) to the main system clock.  It has no effect if the error
between the two clocks is currently estimated at less than a second (the
resolution of the RTC is only 1 second).

   The command takes no arguments.  It performs the following steps (if
the RTC is more than 1 second away from the system clock):

  1. Remember the currently estimated gain/loss rate of the RTC and
     flush the previous measurements.

  2. Step the real time clock to bring it within a second of the system
     clock.

  3. Make several measurements to accurately determine the new offset
     between the RTC and the system clock (i.e. the remaining fraction
     of a second error)

  4. Save the RTC parameters to the RTC file (specified with the
     `rtcfile' directive in the configuration file (*note rtcfile
     directive::).

   The last step is done as a precaution against the computer suffering
a power failure before either the daemon exits or the `writertc'
command is issued.

   `chronyd' will still work perfectly well both whilst operating and
across machine reboots even if the `trimrtc' command is never used (and
the RTC is allowed to drift away from true time).  The `trimrtc'
command is provided as a method by which it can be corrected, in a
manner compatible with `chronyd' using it to maintain accurate time
across machine reboots.


File: chrony.info,  Node: writertc command,  Prev: trimrtc command,  Up: Chronyc command reference

writertc
........

   The `writertc' command writes the currently estimated error and
gain/loss rate parameters for the RTC to the RTC file (specified with
the `rtcfile' directive (*note rtcfile directive::)).  This information
is also written automatically when `chronyd' is killed (with SIGHUP,
SIGINT, SIGQUIT or SIGTERM).


File: chrony.info,  Node: Porting guide,  Next: GPL,  Prev: Usage reference,  Up: Top

Porting guide
*************

   This appendix discusses issues that have arisen in writing the
system-specific parts of the existing ports.  This will provide useful
information for those attempting to write ports to other systems.

* Menu:

* System driver files::         What needs to go in a driver file for a
                                particular type of system
* Quirks of particular systems::  Problem areas that have been found on ports
                                already written.


File: chrony.info,  Node: System driver files,  Next: Quirks of particular systems,  Up: Porting guide

System driver files
===================

   The system specific parts of the software are contained in files with
names like `sys_linux.c'.

   The following functions are required in a system driver file:

  1. A function to read the current frequency

  2. A function to set the current frequency

  3. A function to slew the system time by a specified delta

  4. A function to step the system time by a specified delta

  5. A function to work out the error at a particular time between the
     system's clock and `chronyd's' estimate of real time.  (This is
     required because some systems have to track real time by making
     the system time follow it in a 'sawtooth' fashion).

   The "frequency" is the rate at which the system gains or loses time,
measured relative to the system when running uncompensated.


File: chrony.info,  Node: Quirks of particular systems,  Prev: System driver files,  Up: Porting guide

Quirks of particular systems
============================

   These sections describe quirks in each system type that needed to be
investigated to port the software to each system type.

* Menu:

* Linux porting quirks::
* Solaris 2.5 porting quirks::
* SunOS 4.1.4 porting quirks::


File: chrony.info,  Node: Linux porting quirks,  Next: Solaris 2.5 porting quirks,  Up: Quirks of particular systems

Linux
-----

   The following quirks have been found in developing the Linux port.

  1. In order to avoid floating point arithmetic, the kernel uses
     shifting and adding to approximate a scaling of 100/128.  This
     approximation implies that the frequency set via the `adjtimex()'
     system call is not the frequency that is actually obtained.  The
     method of approximation varies between kernel versions and must be
     determined by examining the kernel source.  An inverse factor must
     be included in the driver to compensate.

  2. In some kernel versions, an `adjtimex()' system call with the flags
     bits all zeroed will return the amount of offset still to be
     corrected.  In others (e.g. the 2.0 series beyond 2.0.32), the
     offset must be changed in order to get the old offset returned
     (similar to `adjtime()' on other systems).



File: chrony.info,  Node: Solaris 2.5 porting quirks,  Next: SunOS 4.1.4 porting quirks,  Prev: Linux porting quirks,  Up: Quirks of particular systems

Solaris 2.5
-----------

   The following quirks have been found in developing the Solaris port.

  1. The `adjtime()' system call with a zero argument does not cancel an
     adjustment that is in progress - it just reports the remaining
     adjustment.

  2. The `settimeofday()' system call only observes the seconds part of
     the argument - any fractional seconds part is lost.  second.

  3. The kernel variable `dosynctodr' has to be set to zero, otherwise
     the system clock is periodically reset to the real-time clock.


File: chrony.info,  Node: SunOS 4.1.4 porting quirks,  Prev: Solaris 2.5 porting quirks,  Up: Quirks of particular systems

SunOS 4.1.4
-----------

   The following quirks have been found in developing the SunOS port.

  1. The `adjtime()' system call truncates its argument to a multiple of
     the system's `tickadj' variable.  (`chronyd' sets that to 100,
     giving a 1 part in 100 slewing capability for correcting offsets.)

  2. The kernel variable `dosynctodr' has to be set to zero, otherwise
     the system clock is periodically reset to the real-time clock.

