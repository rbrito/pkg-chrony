This is chrony.info, produced by makeinfo version 4.0 from chrony.texi.

   This only occurs in the info case


File: chrony.info,  Node: driftfile directive,  Next: dumpdir directive,  Prev: deny directive,  Up: Configuration file

driftfile
---------

   One of the main activities of the `chronyd' program is to work out
the rate at which the system clock gains or loses time relative to real
time.

   Whenever `chronyd' computes a new value of the gain/loss rate, it is
desirable to record it somewhere.  This allows `chronyd' to begin
compensating the system clock at that rate whenever it is restarted,
even before it has had a chance to obtain an equally good estimate of
the rate during the new run.  (This process may take many minutes, at
least).

   The driftfile command allows a file to be specified into which
`chronyd' can store the rate information.  Two parameters are recorded
in the file.  The first is the rate at which the system clock gains or
loses time, expressed in parts per million, with gains positive.
Therefore, a value of 100.0 indicates that when the system clock has
advanced by a second, it has gained 100 microseconds on reality (so the
true time has only advanced by 999900 microseconds).  The second is an
estimate of the error bound around the first value in which the true
rate actually lies.

   An example of the driftfile command is

     driftfile /etc/chrony.drift


File: chrony.info,  Node: dumpdir directive,  Next: dumponexit directive,  Prev: driftfile directive,  Up: Configuration file

dumpdir
-------

   To compute the rate of gain or loss of time, `chronyd' has to store
a measurement history for each of the time sources it uses.

   Certain systems (so far only Linux) have operating system support for
setting the rate of gain or loss to compensate for known errors.  (On
other systems, `chronyd' must simulate such a capability by
periodically slewing the system clock forwards or backwards by a
suitable amount to compensate for the error built up since the previous
slew).

   For such systems, it is possible to save the measurement history
across restarts of `chronyd' (assuming no changes are made to the system
clock behaviour whilst it is not running).  If this capability is to be
used (via the dumponexit command in the configuration file, or the dump
command in chronyc), the dumpdir command should be used to define the
directory where the measurement histories are saved.

   An example of the command is

     dumpdir /var/log/chrony

   A source whose IP address is 1.2.3.4 would have its measurement
history saved in the file `/var/log/chrony/1.2.3.4.dat'.


File: chrony.info,  Node: dumponexit directive,  Next: initstepslew directive,  Prev: dumpdir directive,  Up: Configuration file

dumponexit
----------

   If this command is present, it indicates that `chronyd' should save
the measurement history for each of its time sources recorded whenever
the program exits.  (See the dumpdir command above).


File: chrony.info,  Node: initstepslew directive,  Next: keyfile directive,  Prev: dumponexit directive,  Up: Configuration file

initstepslew
------------

   In normal operation, `chronyd' always slews the time when it needs to
adjust the system clock.  For example, to correct a system clock which
is 1 second slow, `chronyd' slightly increases the amount by which the
system clock is advanced on each clock interrupt, until the error is
removed.  (Actually, this is done by calling the `adjtime()' or similar
system function which does it for us.)  Note that at no time does time
run backwards with this method.

   On most Unix systems it is not desirable to step the system clock,
because many programs rely on time advancing monotonically forwards.

   When the `chronyd' daemon is initially started, it is possible that
the system clock is considerably in error.  Attempting to correct such
an error by slewing may not be sensible, since it may take several hours
to correct the error by this means.

   The purpose of the `initstepslew' directive is to allow `chronyd' to
make a rapid measurement of the system clock error at boot time, and to
correct the system clock by stepping before normal operation begins.
Since this would normally be performed only at an appropriate point in
the system boot sequence, no other software should be adversely affected
by the step.

   If the correction required is less than a specified threshold, a
slew is used instead.  This makes it easier to restart `chronyd' whilst
the system is in normal operation.

   The `initstepslew' directive takes a threshold and a list of NTP
servers as arguments.  A maximum of 8 will be used.  Each of the servers
is rapidly polled several times, and a majority voting mechanism used to
find the most likely range of system clock error that is present.  A
step (or slew) is applied to the system clock to correct this error.
`chronyd' then enters its normal operating mode (where only slews are
used).

   An example of use of the command is

     initstepslew 30 foo.bar.com baz.quz.com

   where 2 NTP servers are used to make the measurement.  The `30'
indicates that if the system's error is found to be 30 seconds or less,
a slew will be used to correct it; if the error is above 30 seconds, a
step will be used.

   The `initstepslew' directive can also be used in an isolated LAN
environment, where the clocks are set manually.  The most stable
computer is chosen as the master, and the other computers are slaved to
it.  If each of the slaves is configured with the local option (see
below), the master can be set up with an `initstepslew' directive which
references some or all of the slaves.  Then, if the master machine has
to be rebooted, the slaves can be relied on to 'flywheel' the time for
the master.


File: chrony.info,  Node: keyfile directive,  Next: local directive,  Prev: initstepslew directive,  Up: Configuration file

keyfile
-------

   This command is used to specify the location of the file containing
ID/key pairs for the following 2 uses:

   * Authentication of NTP packets.

   * Authentication of administrator commands entered via chronyc.

   The format of the command is shown in the example below

     keyfile /etc/chrony.keys

   The argument is simply the name of the file containing the ID/key
pairs.  The format of the file is shown below

     10 tulip
     11 hyacinth
     20 crocus
     25 iris
      ...

   Each line consists of an ID and a password.  The ID can be any
unsigned integer in the range 0 through 2**32-1.  The password can be
any string of characters not containing a space.

   For NTP use, the MD5 authentication scheme is always used.  This
must be borne in mind if `chronyd' is to inter-operate in authenticated
mode with `xntpd' running on other computers.

   The ID for the chronyc authentication key is specified with the
commandkey command (see earlier).


File: chrony.info,  Node: local directive,  Next: log directive,  Prev: keyfile directive,  Up: Configuration file

local
-----

   The local keyword is used to allow `chronyd' to appear synchronised
to real time (from the viewpoint of clients polling it), even if it has
no current synchronisation source.

   This option is normally used on computers in an isolated network,
where several computers are required to synchronise to one other, this
being the "master" which is kept vaguely in line with real time by
manual input.

   An example of the command is

     local stratum 10

   The value 10 may be substituted with other values in the range 1
through 15.  Stratum 1 indicates a computer that has a true real-time
reference directly connected to it (e.g. GPS, atomic clock etc) &ndash;
such computers are expected to be very close to real time.  Stratum 2
computers are those which have a stratum 1 server; stratum 3 computers
have a stratum 2 server and so on.

   A large value of 10 indicates that the clock is so many hops away
from a reference clock that its time is fairly unreliable.  Put another
way, if the computer ever has access to another computer which is
ultimately synchronised to a reference clock, it will almost certainly
be at a stratum less than 10.  Therefore, the choice of a high value
like 10 for the local command prevents the machine's own time from ever
being confused with real time, were it ever to leak out to clients that
have visibility of real servers.


File: chrony.info,  Node: log directive,  Next: logchange directive,  Prev: local directive,  Up: Configuration file

log
---

   The log command indicates that certain information is to be logged.

`measurements'
     This option logs the raw NTP measurements and related information
     to a file called measurements.log.

`statistics'
     This option logs information about the regression processing to a
     file called statistics.log.

`tracking'
     This option logs changes to the estimate of the system's gain or
     loss rate, and any slews made, to a file called tracking.log.

`rtc'
     This option logs information about the system's real-time clock.

   The files are written to the directory specified by the logdir
command.

   An example of the command is

     log measurements statistics tracking

* Menu:

* measurements log::            The format of the measurements log
* statistics log::              The format of the statistics log
* tracking log::                The format of the tracking log
* RTC log::                     The format of the RTC log


File: chrony.info,  Node: measurements log,  Next: statistics log,  Prev: log directive,  Up: log directive

Measurements log file format
............................

   An example line (which actually appears as a single line in the file)
from the measurements log file is shown below.

     22Jul98 05:40:50 158.152.1.76    N  8 1111 11 1111 10 10  1 \
        -4.966e-03  2.296e-01  1.577e-05  1.615e-01  7.446e-03

   The columns are as follows (the quantities in square brackets are the
values from the example line above) :

  1. Date [22Jul98]

  2. Hour:Minute:Second [05:40:50].  Note that the date/time pair is
     expressed in UTC, not the local time zone.

  3. IP address of server/peer from which measurement comes
     [158.152.1.76]

  4. Leap status (`N' means normal, `-' means that the last minute of
     today has 61 seconds, `+' means that the last minute of the day
     has 59 seconds, `?' means the remote computer is not currently
     synchronised.) [N]

  5. Stratum of remote computer. [2]

  6. RFC1305 tests 1 through 4 (1=pass, 0=fail) [1111]

  7. Tests for maximum delay and maximum delay ratio, against user
     defined parameters (1=pass, 0=fail) [11]

  8. RFC1305 tests 5 through 8 (1=pass, 0=fail) [1111]

  9. Local poll [10]

 10. Remote poll [10]

 11. `Score' (an internal score within each polling level used to
     decide when to increase or decrease the polling level.  This is
     adjusted based on changes to the variance of the measurements
     obtained from the source). [1]

 12. The estimated local clock error (`theta' in RFC1305).  Positive
     indicates that the local clock is slow. [-4.966e-03].

 13. The peer delay (`delta' in RFC1305). [2.296e-01]

 14. The peer dispersion (`epsilon' in RFC1305). [1.577e-05]

 15. The root delay (`Delta' in RFC1305). [1.615e-01]

 16. The root dispersion (`E' in RFC1305). [7.446e-03]

   A banner is periodically written to the log file to indicate the
meanings of the columns.


File: chrony.info,  Node: statistics log,  Next: tracking log,  Prev: measurements log,  Up: log directive

Statistics log file format
..........................

   An example line (which actually appears as a single line in the file)
from the measurements log file is shown below.

     22Jul98 05:40:50 158.152.1.76     6.261e-03 -3.247e-03 \
          2.220e-03  1.874e-06  1.080e-06 7.8e-02  16   0   8

   The columns are as follows (the quantities in square brackets are the
values from the example line above) :

  1. Date [22Jul98]

  2. Hour:Minute:Second [05:40:50].  Note that the date/time pair is
     expressed in UTC, not the local time zone.

  3. IP address of server/peer from which measurement comes
     [158.152.1.76]

  4. The estimated standard deviation of the measurements from the
     source (in seconds). [6.261e-03]

  5. The estimated offset of the source (in seconds, positive means the
     local clock is estimated to be fast, in this case). [-3.247e-03]

  6. The estimated standard deviation of the offset estimate (in
     seconds). [2.220e-03]

  7. The estimated rate at which the local clock is gaining or losing
     time relative to the source (in seconds per second, positive means
     the local clock is gaining).  This is relative to the compensation
     currently being applied to the local clock, _not_ to the local
     clock without any compensation. [1.874e-06]

  8. The estimated error in the rate value (in seconds per second).
     [1.080e-06].

  9. The ration of |old_rate - new_rate| / old_rate_error.  Large values
     indicate the statistics are not modelling the source very well.
     [7.8e-02]

 10. The number of measurements currently being used for the regression
     algorithm. [16]

 11. The new starting index (the oldest sample has index 0; this is the
     method used to prune old samples when it no longer looks like the
     measurements fit a linear model). [0, i.e. no samples discarded
     this time]

 12. The number of runs.  The number of runs of regression residuals
     with the same sign is computed.  If this is too small it indicates
     that the measurements are no longer represented well by a linear
     model and that some older samples need to be discarded.  The
     number of runs for the data that is being retained is tabulated.
     Values of approximately half the number of samples are expected.
     [8]

   A banner is periodically written to the log file to indicate the
meanings of the columns.


File: chrony.info,  Node: tracking log,  Next: RTC log,  Prev: statistics log,  Up: log directive

Tracking log file format
........................

   An example line (which actually appears as a single line in the file)
from the measurements log file is shown below.

     22Jul98 05:40:50 158.152.1.76     3    340.529      1.606  1.046e-03

   The columns are as follows (the quantities in square brackets are the
values from the example line above) :

  1. Date [22Jul98]

  2. Hour:Minute:Second [05:40:50].  Note that the date/time pair is
     expressed in UTC, not the local time zone.

  3. The IP address of the server/peer to which the local system is
     synchronised. [158.152.1.76]

  4. The stratum of the local system. [3]

  5. The local system frequency (in ppm, positive means the local
     system runs fast of UTC). [340.529]

  6. The error bounds on the frequency (in ppm) [1.606]

  7. The estimated local offset at the epoch (which is rapidly
     corrected by slewing the local clock.  (In seconds, positive
     indicates the local system is fast of UTC). [1.046e-3]

   A banner is periodically written to the log file to indicate the
meanings of the columns.


File: chrony.info,  Node: RTC log,  Prev: tracking log,  Up: log directive

Real-time clock log file format
...............................

   An example line (which actually appears as a single line in the file)
from the measurements log file is shown below.

     22Jul98 05:40:50     -0.037360 1       -0.037434\
               -37.948  12   5  120

   The columns are as follows (the quantities in square brackets are the
values from the example line above) :

  1. Date [22Jul98]

  2. Hour:Minute:Second [05:40:50].  Note that the date/time pair is
     expressed in UTC, not the local time zone.

  3. The measured offset between the system's real time clock and the
     system (`gettimeofday()') time.  In seconds, positive indicates
     that the RTC is fast of the system time. [-0.037360].

  4. Flag indicating whether the regression has produced valid
     coefficients. (1 for yes, 0 for no). [1]

  5. Offset at the current time predicted by the regression process.  A
     large difference between this value and the measured offset tends
     to indicate that the measurement is an outlier with a serious
     measurement error. [-0.037434].

  6. The rate at which the RTC is losing or gaining time relative to the
     system clock.  In ppm, with positive indicating that the RTC is
     gaining time. [-37.948]

  7. The number of measurements used in the regression. [12]

  8. The number of runs of regression residuals of the same sign.  Low
     values indicate that a straight line is no longer a good model of
     the measured data and that older measurements should be discarded.
     [5]

  9. The measurement interval used prior to the measurement being made
     (in seconds). [120]

   A banner is periodically written to the log file to indicate the
meanings of the columns.


File: chrony.info,  Node: logchange directive,  Next: logdir directive,  Prev: log directive,  Up: Configuration file

logchange
---------

   This directive forces `chronyd' to send a message to syslog if it
makes a system clock adjustment larger than a threshold value.  An
example of use is

     logchange 0.5

   which would cause a syslog message to be generated a system clock
error of over 0.5 seconds starts to be compensated.

   Clock errors detected either via NTP packets or via timestamps
entered via the `settime' command of `chronyc' are logged.

   This directive assumes that syslog messages are appearing where
somebody can see them.  This allows that person to see if a large error
has arisen, e.g. because of a fault, or because of faulty timezone
handling, for example when summer time (daylight saving) starts or ends.


File: chrony.info,  Node: logdir directive,  Next: mailonchange directive,  Prev: logchange directive,  Up: Configuration file

logdir
------

   This directive allows the directory where log files are written to be
specified.

   An example of the use of this directive is

     logdir /var/log/chrony


File: chrony.info,  Node: mailonchange directive,  Next: manual directive,  Prev: logdir directive,  Up: Configuration file

mailonchange
------------

   This directive defines an email address to which mail should be sent
if chronyd applies a correction exceeding a particular threshold to the
system clock.

   An example of use of this directive is

     mailonchange root@localhost 0.5

   This would send a mail message to root if a change of more than 0.5
seconds were applied to the system clock.


File: chrony.info,  Node: manual directive,  Next: maxupdateskew directive,  Prev: mailonchange directive,  Up: Configuration file

manual
------

   The `manual' directive enables support at run-time for the `settime'
command in chronyc (*note settime command::).  If no `manual' directive
is included, any attempt to use the `settime' command in chronyc will
be met with an error message.

   Note that the `settime' command can be enabled at run-time using the
`manual' command in chronyc (*note manual command::).  (The idea of the
two commands is that the `manual' command controls the manual clock
driver's behaviour, whereas the `settime' command allows samples of
manually entered time to be provided).


File: chrony.info,  Node: maxupdateskew directive,  Next: noclientlog directive,  Prev: manual directive,  Up: Configuration file

maxupdateskew
-------------

   One of `chronyd's' tasks is to work out how fast or slow the
computer's clock runs relative to its reference sources.  In addition,
it computes an estimate of the error bounds around the estimated value.

   If the range of error is too large, it probably indicates that the
measurements have not settled down yet, and that the estimated gain or
loss rate is not very reliable.

   The `maxupdateskew' parameter allows the threshold for determining
whether an estimate may be so unreliable that it should not be used.

   The syntax is

     maxupdateskew <skew-in-ppm>

   Typical values for <skew-in-ppm> might be 100 for a dial-up
connection to servers over a phone line, and 5 or 10 for a computer on
a LAN.

   It should be noted that this is not the only means of protection
against using unreliable estimates.  At all times, `chronyd' keeps
track of both the estimated gain or loss rate, and the error bound on
the estimate.  When a new estimate is generated following another
measurement from one of the sources, a weighted combination algorithm is
used to update the master estimate.  So if `chronyd' has an existing
highly-reliable master estimate and a new estimate is generated which
has large error bounds, the existing master estimate will dominate in
the new master estimate.


File: chrony.info,  Node: noclientlog directive,  Next: peer directive,  Prev: maxupdateskew directive,  Up: Configuration file

noclientlog
-----------

   This directive, which takes no arguments, specifies that client
accesses are not to be logged.  Normally they are logged, allowing
statistics to be reported using the `clients' command in `chronyc'.


File: chrony.info,  Node: peer directive,  Next: port directive,  Prev: noclientlog directive,  Up: Configuration file

peer
----

   The syntax of this directive is identical to that for the `server'
directive (*note server directive::), except that it is used to specify
an NTP peer rather than an NTP server.


File: chrony.info,  Node: port directive,  Next: rtcfile directive,  Prev: peer directive,  Up: Configuration file

port
----

   This option allows you to configure the port used for the NTP service
on your machine.

   The compiled in default is udp/123, the standard NTP port.  It is
unlikely that you would ever need to change this value.  A possible
exception would be if you wanted to operate strictly in client-only
mode and never be available as a server to xntpd clients.

   An example of the port command is

     port 11123

   This would change the NTP port served by chronyd on the computer to
udp/11123.


File: chrony.info,  Node: rtcfile directive,  Next: rtconutc directive,  Prev: port directive,  Up: Configuration file

rtcfile
-------

   The `rtcfile' directive defines the name of the file in which
`chronyd' can save parameters associated with tracking the accuracy of
the system's real-time clock (RTC).

   The syntax is illustrated in the following example

     rtcfile /etc/chrony.rtc

   `chronyd' saves information in this file when it exits and when the
`writertc' command is issued in `chronyc'.  The information saved is
the RTC's error at some epoch, that epoch (in seconds since January 1
1970), and the rate at which the RTC gains or loses time.

   So far, the support for real-time clocks is limited - their code is
even more system-specific than the rest of the software.  You can only
use the real time clock facilities (the `rtcfile' directive and the
`-s' command line option to `chronyd') if the following three
conditions apply:

  1. You are running Linux v2.0.x with x>=32.

  2. You have compiled the kernel with extended real-time clock support
     (i.e. the `/dev/rtc' device is capable of doing useful things).

  3. You don't have other applications that need to make use of
     `/dev/rtc' at all.



File: chrony.info,  Node: rtconutc directive,  Next: server directive,  Prev: rtcfile directive,  Up: Configuration file

rtconutc
--------

   `chronyd' assumes by default that the real time clock (RTC) keeps
local time (including any daylight saving changes).  This is convenient
on PCs running Linux which are dual-booted with DOS or Windows.

   NOTE : IF YOU KEEP THE REAL TIME CLOCK ON LOCAL TIME AND YOUR
COMPUTER IS OFF WHEN DAYLIGHT SAVING (SUMMER TIME) STARTS OR ENDS, THE
COMPUTER'S SYSTEM TIME WILL BE ONE HOUR IN ERROR WHEN YOU NEXT BOOT AND
START CHRONYD.

   An alternative is for the RTC to keep Universal Coordinated Time
(UTC).  This does not suffer from the 1 hour problem when daylight
saving starts or ends.

   If the `rtconutc' directive appears, it means the RTC is required to
keep UTC.  The directive takes no arguments.  It is equivalent to
specifying the `-u' switch to the Linux `/sbin/clock' program.


File: chrony.info,  Node: server directive,  Prev: rtconutc directive,  Up: Configuration file

server
------

   The `server' directive allows NTP servers to be specified.  The
client/server relationship is strictly hierarchical : a client may
synchronise its system time to that of the server, but the server's
system time will never be influenced by that of a client.

   The `server' directive is immediately followed by either the name of
the server, or its IP address in dotted-quad notation.  The server
command also supports a number of subfields (which may be defined in any
order):

`port'
     This option allows the UDP port on which the server understands NTP
     requests to be specified.  For normal servers this option should
     not be required (the default is 123, the standard NTP port).

`minpoll'
     Although `chronyd' will trim the rate at which it samples the
     server during normal operation, the user may wish to constrain the
     minimum polling interval.  This is always defined as a power of 2,
     so <tt/minpoll 5/ would mean that the polling interval cannot drop
     below 32 seconds.  The default is 6 (64 seconds).

`maxpoll'
     In a similar way, the user may wish to constrain the maximum
     polling interval.  Again this is specified as a power of 2, so
     <tt/maxpoll 9/ indicates that the polling interval must stay at or
     below 512 seconds.  The default is 10 (1024 seconds).

`maxdelay'
     `chronyd' uses the network round-trip delay to the server to
     determine how accurate a particular measurement is likely to be.
     Long round-trip delays indicate that the request, or the response,
     or both were delayed.  If only one of the messages was delayed the
     measurement error is likely to be substantial.

     For small variations in round trip delay, `chronyd' uses a
     weighting scheme when processing the measurements.  However,
     beyond a certain level of delay the measurements are likely to be
     so corrupted as to be useless.  (This is particularly so on
     dial-up or other slow links, where a long delay probably indicates
     a highly asymmetric delay caused by the response waiting behind a
     lot of packets related to a download of some sort).

     If the user knows that round trip delays above a certain level
     should cause the measurement to be ignored, this level can be
     defined with the maxdelay command.  For example, <tt/maxdelay 0.3/
     would indicate that measurements with a round-trip delay of 0.3
     seconds or more should be ignored.

`maxdelayratio'
     This option is similar to the maxdelay option above.  `chronyd'
     keeps a record of the minimum round-trip delay amongst the previous
     measurements that it has buffered.  If a measurement has a round
     trip delay that is greater than the maxdelayratio times the
     minimum delay, it will be rejected.

`presend'
     If the timing measurements being made by `chronyd' are the only
     network data passing between two computers, you may find that some
     measurements are badly skewed due to either the client or the
     server having to do an ARP lookup on the other party prior to
     transmitting a packet.  This is more of a problem with long
     sampling intervals, which may be similar in duration to the
     lifetime of entries in the ARP caches of the machines.

     In order to avoid this problem, the `presend' option may be used.
     It takes a single integer argument, which is the smallest polling
     interval for which a pair of packets will be exchanged between the
     client and the server prior to the actual measurement being
     initiated by the client.  For example, with the following option
     included in a `server' directive :

          presend 9

     when the polling interval is 512 seconds or more, a UDP echo
     datagram will be sent to the server a short time (currently 4
     seconds) before the NTP client mode datagram.

`key'
     The NTP protocol supports the inclusion of checksums in the
     packets, to prevent computers having their system time upset by
     rogue packets being sent to them.  The checksums are generated as
     a function of a password, using the MD5 algorithm.

     The association between key numbers and passwords is contained in
     the keys file, defined by the keyfile command.

     If the key option is present, `chronyd' will attempt to use
     authenticated packets when communicating with this server.  The key
     number used will be the single argument to the key option.  The
     server must have the same password for this key number configured,
     otherwise no relationship between the computers will be possible.

`offline'
     If the server will not be reachable when `chronyd' is started, the
     offline option may be specified.  `chronyd' will not try to poll
     the server until it is enabled to do so (by using the online
     option of `chronyc').


File: chrony.info,  Node: Running chronyc,  Prev: Configuration file,  Up: Usage reference

Running chronyc
===============

   Chronyc is the program that can be used to reconfigure options within
the `chronyd' program whilst it is running.  Chronyc can also be used
to generate status reports about the operation of `chronyd'.

* Menu:

* Chronyc basic use::           How to run chronyc
* Chronyc command line options::  Chrony's command line options
* Security with chronyc::       How chronyd restricts access
* Chronyc command reference::   All the commands chronyc supports


File: chrony.info,  Node: Chronyc basic use,  Next: Chronyc command line options,  Prev: Running chronyc,  Up: Running chronyc

Basic use
---------

   The program chronyc is run by entering

     chronyc

   at the command line.  The prompt `chronyc' is displayed whilst
chronyc is expecting input from the user, when it is being run from a
terminal.  If chronyc's input or output are redirected from/to a file,
the prompt is ow shown.

   When you are finished entering commands, the commands `exit' or
`quit' will terminate the program.  (Entering <Control-D> will also
terminate the program.)


File: chrony.info,  Node: Chronyc command line options,  Next: Security with chronyc,  Prev: Chronyc basic use,  Up: Running chronyc

Command line options
--------------------

   Chronyc supports the following command line options.

`-v'
     Displays the version number of chronyc on the terminal, and exists.

`-h <host>'
     This option allows the user to specify which host running the
     `chronyd' program is to be contacted.  This allows for remote
     configuration, without having to telnet or rlogin to the other host
     first.

     The default is to contact `chronyd' running on the same host as
     that where chronyc is being run.

`-p <port>'
     This option allows the user to specify the UDP port number which
     the target `chronyd' is using for its command & monitoring
     connections.  This defaults to the compiled-in default; there
     would rarely be a need to change this.


File: chrony.info,  Node: Security with chronyc,  Next: Chronyc command reference,  Prev: Chronyc command line options,  Up: Running chronyc

Security with chronyc
---------------------

   Many of the commands available through chronyc have a fair amount of
power to reconfigure the run-time behaviour of `chronyd'.  Consequently,
`chronyc' is quite dangerous for the integrity of the target system's
clock performance.  Having access to `chronyd' via chronyc is more or
less equivalent to being able to modify `chronyd's' configuration file
(typically `/etc/chrony.conf') and to restart `chronyd'.

   Chronyc also provides a number of monitoring (as opposed to
commanding) commands, which will not affect the behaviour of `chronyd'.
However, you may still want to restrict access to these commands.

   In view of this, access to some of the capabilities of chronyc will
usually be tightly controlled.  There are two mechanisms supported:

  1. The set of hosts from which `chronyd' will accept commands can be
     restricted.  By default, commands will only be accepted from the
     same host that `chronyd' is running on.

  2. Any command that actually reconfigures some aspect of `chronyd's'
     behaviour requires the user of chronyc to know a password.  This
     password is specified in `chronyd's' keys file (*note keyfile
     directive::) and specified via the commandkey option in its
     configuration file (*note commandkey directive::).

   Only the following commands can be used _without_ providing a
password:

   * `exit'

   * `help'

   * `password'

   * `quit'

   * `rtcdata'

   * `sources'

   * `sourcestats'

   * `tracking'

   All other commands require a password to have been specified
previously, because they affect `chronyd's' operation.


File: chrony.info,  Node: Chronyc command reference,  Prev: Security with chronyc,  Up: Running chronyc

Command reference
-----------------

   This section describes each of the commands available within the
chronyc program.  Chronyc offers the user a simple command-line driven
interface.

* Menu:

* accheck command::             Verifying NTP client access
* add peer command::            Add a new NTP peer
* add server command::          Add a new NTP server
* allow command::               Allowing NTP client access
* allow all command::           Allowing NTP client access
* burst command::               Initiating a rapid set of measurements
* clients command::             Show clients that have accessed the server
* cmdaccheck command::          Verifying command client access
* cmdallow command::            Allowing command client access
* cmdallow all command::        Allowing command client access
* cmddeny command::             Denying command client access
* cmddeny all command::         Denying command client access
* cyclelogs command::           Close and re-open open log files
* delete command::              Remove an NTP server or peer
* deny command ::               Denying NTP client access
* deny all command::            Denying NTP client access
* dump command::                Dump measurement histories to files
* exit command::                Exit from chronyc
* help command::                Generate help summary
* local command::               Let computer be a server when it is unsynchronised
* makestep command::            Immediately correct the system clock instead of slewing
* manual command::              Enable/disable/configure options for settime
* maxdelay command::            Set max measurement delay for a source
* maxdelayratio command::       Set max measurement delay for a source as ratio
* maxpoll command::             Set maximum polling interval for a source
* maxupdateskew command::       Set safety threshold for clock gain/loss rate
* minpoll command::             Set minimum polling interval for a source
* offline command::             Warn that connectivity to a source will be lost
* online command::              Warn that connectivity to a source has been restored
* password command::            Provide password needed for most commands
* quit command::                Exit from chronyc
* rtcdata command::             Display RTC parameters
* settime command::             Provide a manual input of the current time
* sources command::             Display information about the current set of sources
* sourcestats command::         Display the rate & offset estimation performance of sources
* tracking command::            Display system clock performance
* trimrtc command::             Correct the RTC time to the current system time
* writertc command::            Write the RTC parameters to file.


File: chrony.info,  Node: accheck command,  Next: add peer command,  Prev: Chronyc command reference,  Up: Chronyc command reference

accheck
.......

   This command allows you to check whether client NTP access is allowed
from a particular host.

   Examples of use, showing a named host and a numeric IP address, are
as follows:

     accheck a.b.c
     accheck 1.2.3.4

   This command can be used to examine the effect of a series of
`allow', `allow all', `deny' and `deny all' commands specified either
via chronyc, or in `chronyd's' configuration file.


File: chrony.info,  Node: add peer command,  Next: add server command,  Prev: accheck command,  Up: Chronyc command reference

add peer
........

   The `add peer' command allows a new NTP peer to be added whilst
`chronyd' is running.

   Following the words `add peer', the syntax of the following
parameters and options is identical to that for the `peer' directive in
the configuration file (*note peer directive::).

   An example of using this command is shown below.

     add peer foo.bar.com minpoll 6 maxpoll 10 authkey 25


File: chrony.info,  Node: add server command,  Next: allow command,  Prev: add peer command,  Up: Chronyc command reference

add server
..........

   The `add server' command allows a new NTP server to be added whilst
`chronyd' is running.

   Following the words `add server', the syntax of the following
parameters and options is identical to that for the `server' directive
in the configuration file (*note server directive::).

   An example of using this command is shown below.

     add server foo.bar.com minpoll 6 maxpoll 10 authkey 25


File: chrony.info,  Node: allow command,  Next: allow all command,  Prev: add server command,  Up: Chronyc command reference

allow
.....

   The effect of the allow command is identical to the `allow'
directive in the configuration file (*note allow directive::).

   The syntax is illustrated in the following examples:

     allow foo.bar.com
     allow 1.2
     allow 3.4.5


File: chrony.info,  Node: allow all command,  Next: burst command,  Prev: allow command,  Up: Chronyc command reference

allow all
.........

   The effect of the allow command is identical to the `allow all'
directive in the configuration file (*note allow directive::).


File: chrony.info,  Node: burst command,  Next: clients command,  Prev: allow all command,  Up: Chronyc command reference

burst
.....

   The `burst' command tells `chronyd' to make a set of measurements to
each of its sources over a short duration (rather than the usual
periodic measurements that it makes).  After such a burst, `chronyd'
will revert to the previous state for each source.  This might be either
online, if the source was being periodically measured in the normal way,
or offline, if the source had been indicated as being offline.
(Switching a source between the online and offline states is described
in *Note online command::, *Note offline command::).

   The syntax of the burst command is as follows

     burst <n-good-measurements>/<max-measurements> [<mask>/<masked-address>]

   The mask and masked-address arguments are optional, in which case
`chronyd' will initiate a burst for all of its currently defined
sources.

   The arguments have the following meaning and format.

`n-good-measurements'
     This defines the number of good measurements that `chronyd' will
     want to obtain from each source.  A measurement is good if it
     passes certain tests, for example, the round trip time to the
     source must be acceptable.  (This allows `chronyd' to reject
     measurements that are likely to be bogus.)

`max-measurements'
     This defines the maximum number of measurements that `chronyd' will
     attempt to make, even if the required number of good measurements
     has not been obtained.

`mask'
     This is a dotted quad argument (e.g. `255.255.255.0') with which
     the IP address of each of `chronyd''s sources is to be masked.

`masked-address'
     This is a dotted quad argument (e.g. `1.2.3.0').  If the masked IP
     address of a source matches this value then the burst command is
     applied to that source.

   If no mask or masked address arguments are provided, the default is
`0.0.0.0' and `0.0.0.0' respectively, which will match every source.

   An example of the two-argument form of the command is

     burst 2/10

   This will cause `chronyd' to attempt to get two good measurements
from each source, stopping after two have been obtained, but in no
event will it try more than ten probes to the source.

   An example of the four-argument form of the command is

     burst 2/10 255.255.0.0/1.2.0.0

   In this case, the two out of ten sampling will only be applied to
sources whose IP addresses are of the form `1.2.x.y', where x and y are
arbitrary.


File: chrony.info,  Node: clients command,  Next: cmdaccheck command,  Prev: burst command,  Up: Chronyc command reference

clients
.......

   This command shows a list of all clients that have accessed the
server, through either the NTP or command/monitoring ports.  There are
no arguments.

   An example of the output is

   Hostname                   Client    Peer CmdAuth CmdNorm  CmdBad
LstN  LstC =========================  ======  ======  ======  ======
======  ====  ==== localhost                       0       0      15
  1       0   29y     0 aardvark.xxx                    4       0
0       0       0    49   29y badger.xxx                      4
0       0       0       0     6   29y

   Each row shows the data for a single host.  Only hosts that have
passed the host access checks (set with the `allow', `deny', `cmdallow'
and `cmddeny' commands or configuration file directives) are logged.

   The columns are as follows:

  1. The hostname of the client

  2. The number of times the client has accessed the server using an NTP
     client mode packet.

  3. The number of times the client has accessed the server using an NTP
     symmetric active mode packet.

  4. The number of authenticated command packets that have been
     processed from the client (i.e. those following a successful
     `password' command).

  5. The number of unauthenticated command packets that have been
     processed from the client.

  6. The number of bad command packets received from the client (not all
     forms of bad packet are logged).

  7. Time since the last NTP packet was received

  8. Time since the last command packet was received

   The last two entries will be shown as the time since 1970 if no
packet of that type has ever been received.


File: chrony.info,  Node: cmdaccheck command,  Next: cmdallow command,  Prev: clients command,  Up: Chronyc command reference

cmdaccheck
..........

   This command is similar to the `accheck' command, except that it is
used to check whether command access is permitted from a named host.

   Examples of use are as follows:

     cmdaccheck a.b.c
     cmdaccheck 1.2.3.4


File: chrony.info,  Node: cmdallow command,  Next: cmdallow all command,  Prev: cmdaccheck command,  Up: Chronyc command reference

cmdallow
........

   This is similar to the `allow' command, except that it is used to
allow particular hosts or subnets to use the chronyc program to interact
with `chronyd' on the current host.


File: chrony.info,  Node: cmdallow all command,  Next: cmddeny command,  Prev: cmdallow command,  Up: Chronyc command reference

cmdallow all
............

   This is similar to the `allow all' command, except that it is used to
allow particular hosts or subnets to use the chronyc program to interact
with `chronyd' on the current host.


File: chrony.info,  Node: cmddeny command,  Next: cmddeny all command,  Prev: cmdallow all command,  Up: Chronyc command reference

cmddeny
.......

   This is similar to the `deny' command, except that it is used to
allow particular hosts or subnets to use the chronyc program to interact
with `chronyd' on the current host.


File: chrony.info,  Node: cmddeny all command,  Next: cyclelogs command,  Prev: cmddeny command,  Up: Chronyc command reference

cmddeny all
...........

   This is similar to the `deny all' command, except that it is used to
allow particular hosts or subnets to use the chronyc program to
interact with `chronyd' on the current host.


File: chrony.info,  Node: cyclelogs command,  Next: delete command,  Prev: cmddeny all command,  Up: Chronyc command reference

cyclelogs
.........

   The `cyclelogs' command causes all of `chronyd's' open log files to
be closed and re-opened.  This allows them to be renamed so that they
can be periodically purged.  An example of how to do this is shown
below.

     % mv /var/log/chrony/measurements.log /var/log/chrony/measurements1.log
     % chronyc
     chronyc> password aardvark
     200 OK
     chronyc> cyclelogs
     200 OK
     chronyc> exit
     % ls -l /var/log/chrony
     -rw-r--r--   1 root     root            0 Jun  8 18:17 measurements.log
     -rw-r--r--   1 root     root        12345 Jun  8 18:17 measurements1.log


File: chrony.info,  Node: delete command,  Next: deny command,  Prev: cyclelogs command,  Up: Chronyc command reference

delete
......

   The `delete' command allows an NTP server or peer to be removed from
the current set of sources.

   The syntax is illustrated in the examples below.

     delete foo.bar.com
     delete 1.2.3.4

   There is one parameter, the name or IP address of the server or peer
to be deleted.


File: chrony.info,  Node: deny command,  Next: deny all command,  Prev: delete command,  Up: Chronyc command reference

deny
....

   The effect of the allow command is identical to the `deny' directive
in the configuration file (*note deny directive::).

   The syntax is illustrated in the following examples:

     deny foo.bar.com
     deny 1.2
     deny 3.4.5


File: chrony.info,  Node: deny all command,  Next: dump command,  Prev: deny command,  Up: Chronyc command reference

deny all
........

   The effect of the allow command is identical to the `deny all'
directive in the configuration file (*note deny directive::).


File: chrony.info,  Node: dump command,  Next: exit command,  Prev: deny all command,  Up: Chronyc command reference

dump
....

   The `dump' command causes `chronyd' to write its current history of
measurements for each of its sources to dump files, either for
inspection or to support the `-r' option when `chronyd' is restarted.

   The `dump' command is somewhat equivalent to the `dumponexit'
directive in the chrony configuration file.  *Note dumponexit
directive::.

   To use the `dump', you probably want to configure the name of the
directory into which the dump files will be written.  This can only be
done in the configuration file, see *Note dumpdir directive::.


File: chrony.info,  Node: exit command,  Next: help command,  Prev: dump command,  Up: Chronyc command reference

exit
....

   The exit command exits from chronyc and returns the user to the shell
(same as the quit command).


File: chrony.info,  Node: help command,  Next: local command,  Prev: exit command,  Up: Chronyc command reference

help
....

   The help command displays a summary of the commands and their
arguments.


File: chrony.info,  Node: local command,  Next: makestep command,  Prev: help command,  Up: Chronyc command reference

local
.....

   The `local' command allows `chronyd' to be told that it is to appear
as a reference source, even if it is not itself properly synchronised to
an external source.  (This can be used on isolated networks, to allow
one computer to be a master time server with the other computers slaving
to it.)  The `local' command is somewhat equivalent to the `local'
directive in the configuration file, see *Note local directive::.

   The syntax is as shown in the following examples.

     local stratum 10
     local off

   The first example enables the local reference mode on the host, and
sets the stratum at which it should claim to be synchronised.

   The second example disables the local reference mode.


File: chrony.info,  Node: makestep command,  Next: manual command,  Prev: local command,  Up: Chronyc command reference

makestep
........

   Normally chronyd will cause the system to gradually correct any time
offset, by slowing down or speeding up the clock as required.  In
certain situations, the system clock may be so far adrift that this
slewing process would take a very long time to correct the system clock.

   The `makestep' command can be used in this situation.  It cancels
any remaining correction that was being slewed, and jumps the system
clock by the equivalent amount, making it correct immediately.

   BE WARNED - certain software will be seriously affected by such
jumps to the system time.  (That is the reason why chronyd uses slewing
normally.)

   The `makestep' command is currently only available on the Linux
version of chrony.

