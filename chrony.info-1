This is chrony.info, produced by makeinfo version 4.3 from chrony.texi.

INFO-DIR-SECTION Net Utilities
START-INFO-DIR-ENTRY
* chrony: (chrony).			How to use chronyd and chronyc
* chronyd: (chrony)Starting chronyd.	Reference for chronyd
* chronyc: (chrony)Running chronyc.	Reference for chronyc
END-INFO-DIR-ENTRY


File: chrony.info,  Node: Top,  Next: Introduction,  Up: (dir)



* Menu:

* Introduction::                What the chrony suite does
* Installation::                How to compile and install the software
* Typical scenarios::           How to configure the software for some common cases
* Usage reference::             Reference manual
* Porting guide::               Hints to help with porting the software
* GPL::                         The GNU General Public License


File: chrony.info,  Node: Introduction,  Next: Installation,  Prev: Top,  Up: Top

Introduction
************

* Menu:

* Overview::                    What the programs do
* Acknowledgements::            Credit where credit is due
* Availability::                Where to get the software
* Other time synchronisation packages::  Comparision with other software
* Distribution and warranty::   There is no warranty
* Bug reporting::               How to report bugs and make suggestions
* Contributing::                Areas where contributions are particularly welcome


File: chrony.info,  Node: Overview,  Next: Acknowledgements,  Up: Introduction

Overview
========

   Chrony is a software package for maintaining the accuracy of computer
system clocks.  It consists of a pair of programs :

   * `chronyd'.  This is a daemon which runs in background on the
     system.  It obtains measurements (e.g. via the network) of the
     system's offset relative to other systems, and adjusts the system
     time accordingly.  For isolated systems, the user can periodically
     enter the correct time by hand (using `chronyc').  In either case,
     `chronyd' determines the rate at which the computer gains or loses
     time, and compensates for this.

     `chronyd' can also act as an NTP server, and provide a time-of-day
     service to other computers.  A typical set-up is to run `chronyd'
     on a gateway computer that has a dial-up link to the Internet, and
     use it to serve time to computers on a private LAN sitting behind
     the gateway.  The IP addresses that can act as clients of
     `chronyd' can be tightly controlled.  The default is no client
     access.

   * `chronyc'.  This is a command-line driven control and monitoring
     program.  An administrator can use this to fine-tune various
     parameters within the daemon, add or delete servers etc whilst the
     daemon is running.

     The IP addresses from which `chronyc' clients may connect can be
     tightly controlled.  The default is just the computer that
     `chronyd' itself is running on.


File: chrony.info,  Node: Acknowledgements,  Next: Availability,  Prev: Overview,  Up: Introduction

Acknowledgements
================

   The `chrony' suite makes use of the algorithm known as _RSA Data
Security, Inc. MD5 Message-Digest Algorithm_ for authenticating
messages between different machines on the network.

   In writing the `chronyd' program, extensive use has been made of
RFC1305, written by David Mills.  I have occasionally referred to the
`xntp' suite's source code to check details of the protocol that the
RFC did not make absolutely clear.  The core algorithms in `chronyd'
are all completely distinct from `xntp', however.


File: chrony.info,  Node: Availability,  Next: Other time synchronisation packages,  Prev: Acknowledgements,  Up: Introduction

Availability
============

* Menu:

* Getting the software::        Where can I get the software from?
* Platforms::                   Which platforms will it run on?


File: chrony.info,  Node: Getting the software,  Next: Platforms,  Up: Availability

Getting the software
--------------------

   Links on the chrony home page
(http://chrony.sunsite.dk/download.php) describe how to obtain the
software.


File: chrony.info,  Node: Platforms,  Prev: Getting the software,  Up: Availability

Platforms
---------

   Although most of the program is portable between Unix-like systems,
there are parts that have to be tailored to each specific vendor's
system.  These are the parts that interface with the operating system's
facilities for adjusting the system clock; different operating systems
may provide different function calls to achieve this, and even where
the same function is used it may have different quirks in its behaviour.

   The software is known to work in the following environments:
   * Linux/i386 and Linux/ppc.  The software is known to work on Linux
     2.0.x, 2.2.x and 2.4.x.  Prior to 2.0.31, the real time clock
     can't be used.

   * NetBSD

   * BSD/386

   * Solaris 2.3/2.5/2.5.1/2.6/2.7/2.8 on Sparc (Sparc 20, Ultrasparc)
     and i386

   * SunOS 4.1.4 on Sparc 2 and Sparc20.

   Closely related systems may work too, but they have not been tested.

   Porting the software to other system (particularly to those
supporting an `adjtime' system call) should not be difficult, however it
requires access to such systems to test out the driver.


File: chrony.info,  Node: Other time synchronisation packages,  Next: Distribution and warranty,  Prev: Availability,  Up: Introduction

Relationship to other software packages
=======================================

* Menu:

* Comparison with xntpd::
* Comparison with timed::


File: chrony.info,  Node: Comparison with xntpd,  Next: Comparison with timed,  Up: Other time synchronisation packages

xntpd
-----

   The `reference' implementation of the Network Time Protocol is the
program `xntpd', available via The NTP home page
(http://www.eecis.udel.edu/~ntp).

   `xntpd' is designed to support all the operating modes defined by
RFC1305, and has driver support for a large number of reference clocks
(such as GPS receivers) that can be connected directly to a computer,
thereby providing a so-called 'stratum 1' server.

   Things `chronyd' can do that `xntpd' can't:

   * `chronyd' can perform usefully in an environment where access to
     the time reference is intermittent.  `chronyd' estimates _both_
     the current time offset _and_ the rate at which the computer's
     clock gains or loses time, and can use that rate estimate to trim
     the clock after the reference disappears.  `xntpd' corrects any
     time offset by speeding up and slowing down the computer clock, and
     so could be left with a significant rate error if the reference
     disappears whilst it is trying to correct a big offset.

   * `chronyd' provides support for isolated networks whether the only
     method of time correction is manual entry (e.g. by the
     administrator looking at a clock).  `chronyd' can look at the
     errors corrected at different updates to work out the rate at
     which the computer gains or loses time, and use this estimate to
     trim the computer clock subsequently.

   * `chronyd' provides support to work out the gain or loss rate of the
     `real-time clock', i.e. the clock that maintains the time when the
     computer is turned off.  It can use this data when the system
     boots to set the system time from a corrected version of the
     real-time clock.  These real-time clock facilities are only
     available on certain releases of Linux, so far.

   * The `xntpd' program is supported by other programs to carry out
     certain functions.  `ntpdate' is used to provide an initial
     correction to the system clock based on a `one-shot' sampling of
     other NTP servers.  `tickadj' is used to adjust certain operating
     system parameters to make `xntpd' work better.  All this
     functionality is integrated into `chronyd'.

   Things `xntpd' can do that `chronyd' can't:

   * `xntpd' supports a range of different hardware reference clocks
     (GPS, atomic etc) that can be connected to a computer to provide a
     `stratum-1' server.  `chronyd' does not support any such hardware
     _yet_; I don't have access to any to do any development work.
     However, the software architecture should allow such equipment to
     be interfaced at a later date.

   * `xntpd' supports effectively all of RFC1305, including broadcast /
     multicast clients, leap seconds, and extra encryption schemes for
     authenticating data packets.

   * `xntpd' has been ported to more types of computer / operating
     system (so far).

   * xntpd is designed to work solely with integer arithmetic (i.e.
     does not require floating point support from its host).


File: chrony.info,  Node: Comparison with timed,  Prev: Comparison with xntpd,  Up: Other time synchronisation packages

timed
-----

   `timed' is a program that is part of the BSD networking suite.  It
uses broadcast packets to find all machines running the daemon within a
subnet.  The machines elect a master which periodically measures the
system clock offsets of the other computers using ICMP timestamps.
Corrections are sent to each member as a result of this process.

   Problems that may arise with `timed' are :

   * Because it uses broadcasts, it is not possible to isolate its
     functionality to a particular group of computers; there is a risk
     of upsetting other computers on the same network (e.g. where a
     whole company is on the same subnet but different departments are
     independent from the point of view of administering their
     computers.)

   * The update period appears to be 10 minutes.  Computers can build up
     significant offsets relative to each other in that time.  If a
     computer can estimate its rate of drift it can keep itself closer
     to the other computers between updates by adjusting its clock
     every few seconds.  `timed' does not seem to do this.

   * `timed' does not have any integrated capability for feeding
     real-time into its estimates, or for estimating the average rate
     of time loss/gain of the machines relative to real-time (unless
     one of the computers in the group has access to an external
     reference and is always appointed as the `master').

   `timed' does have the benefit over `chronyd' that for isolated
networks of computers, they will track the `majority vote' time.  For
such isolated networks, `chronyd' requires one computer to be the
`master' with the others slaved to it.  If the master has a particular
defective clock, the whole set of computers will tend to slip relative
to real time (but they _will_ stay accurate relative to one another).


File: chrony.info,  Node: Distribution and warranty,  Next: Bug reporting,  Prev: Other time synchronisation packages,  Up: Introduction

Distribution rights and (lack of) warranty
==========================================

   Chrony may be distributed in accordance with the GNU General Public
License version 2, reproduced in *Note GPL::.


File: chrony.info,  Node: Bug reporting,  Next: Contributing,  Prev: Distribution and warranty,  Up: Introduction

Bug reporting and suggestions
=============================

   If you think you've found a bug in chrony, or have a suggestion,
please let me know.  My primary current email address is
<rc@rc0.org.uk>.  If that fails, you could try finding me through one
of the chrony mailing lists, or by looking up my name on a search
engine.

   I can't promise a timescale to fix a bug; it depends a lot on the
how complex the bug is to track down, as I have a lot of other calls on
my time : 2 young children, my job, and indeed other free/open source
software projects.  However, I do intend to look into problems when
time allows.

   Another source of information to try is the chrony users mailing
list.  You can join this by sending an empty message to
<chrony-users-subscribe@sunsite.dk>.  Only subscribers can post to the
list.

   When you are reporting a bug, please send me all the information you
can.  Unfortunately, chrony has proven to be one of those programs
where it is very difficult to reproduce bugs in a different
environment.  So I may have to interact with you quite a lot to obtain
enough extra logging and tracing to pin-point the problem in some
cases.  Please be patient and plan for this!

   Of course, if you can debug the problem yourself and send me a
source code patch to fix it, I will be very grateful!


File: chrony.info,  Node: Contributing,  Prev: Bug reporting,  Up: Introduction

Contributions
=============

   Although chrony is now a fairly mature and established project,
there are still areas that could be improved.  If you can program in C
and have some expertise in these areas, you might be able to fill the
gaps.

   Particular areas I know need addressing are :

  1. Porting to other Unices

     This involves creating equivalents of sys_solaris.c, sys_linux.c
     etc for the new system.  Note, the Linux driver has been reported
     as working on a range of different architectures (Alpha, Sparc,
     MIPS as well as x86 of course).

  2. Porting to Windows NT

     I did a small amount of work on this under Cygwin.  Only the
     sorting out of the include files has really been achieved so far.
     The two main areas still to address are

       1. The system clock driver.

       2. How to make chronyd into an NT service (i.e. what to replace
          fork(), setsid() etc with so that chronyd can be
          automatically started in the system bootstrap.

  3. Hardware clock support

  4. Automation of the trimrtc and writertc mechanisms

     Currently, the RTC trimming mechanism is a manual operation,
     because there has to be a reasonable guarantee that the system
     will stay up for a reasonable length of time afterwards.  (If it
     is shut down too soon, a poor characterisation of the RTC drift
     rate will be stored on disc, giving a bad system clock error when
     the system is next booted.)

     To make chrony more automated for the non-expert user, it would be
     useful if this problem could be avoided so that trimrtc could be
     done automatically (e.g.  in a crontab, or as part of the ip-up or
     ip-down scripts.)



File: chrony.info,  Node: Installation,  Next: Typical scenarios,  Prev: Introduction,  Up: Top

Installation
************

   The software is distributed as source code which has to be compiled.
The source code is supplied in the form of a gzipped tar file, which
unpacks to a subdirectory identifying the name and version of the
program.

   After unpacking the source code, change directory into it, and type

     ./configure

   This is a shell script that automatically determines the system type.
There is a single optional parameter, `--prefix' which indicates the
directory tree where the software should be installed.  For example,

     ./configure --prefix=/opt/free

   will install the `chronyd' daemon into /opt/free/sbin and the
chronyc control program into /opt/free/bin.  The default value for the
prefix is /usr/local.

   The configure script assumes you want to use gcc as your compiler.
If you want to use a different compiler, you can configure this way:

     CC=cc CFLAGS=-O ./configure --prefix=/opt/free

   for Bourne-family shells, or

     setenv CC cc
     setenv CFLAGS -O
     ./configure --prefix=/opt/free

   for C-family shells.

   If the software cannot (yet) be built on your system, an error
message will be shown.  Otherwise, the files `options.h' and `Makefile'
will be generated.

   By default, chronyc will be built to make use of the readline
library.  If you don't want this, specify the -disable-readline flag to
configure.  If you have readline and/or ncurses installed in a
non-standard location, please refer to *note readline support:: for
information.

   Now type

     make

   to build the programs.

   If you want to build the manual in plain text, HTML and info
versions, type

     make docs

   Once the programs have been successfully compiled, they need to be
installed in their target locations.  This step normally needs to be
performed by the superuser, and requires the following command to be
entered.

     make install

   This will install the binaries, plain text manual and manpages.

   To install the HTML and info versions of the manual as well, enter
the command

     make install-docs

   If you want chrony to appear in the top level info directory
listing, you need to run the `install-info' command manually after this
step.  `install-info' takes 2 arguments.  The first is the path to the
`chrony.info' file you have just installed.  This will be the argument
you gave to -prefix when you configured (`/usr/local' by default), with
`/info/chrony.info' on the end.  The second argument is the location of
the file called `dir'.  This will typically be `/usr/info/dir'.  So the
typical command line would be

     install-info /usr/local/info/chrony.info /usr/info/dir

   Now that the software is successfully installed, the next step is to
set up a configuration file.  The contents of this depend on the
network environment in which the computer operates.  The Debian package
installs a simple configuration file suitable for a dial-up pc.  You
should edit it to suit your situation.  Typical scenarios are described
in the following section of the document.

* Menu:

* readline support::            If readline or ncurses in in a non-standard place
* package builders::            Extra options useful to package builders


File: chrony.info,  Node: readline support,  Next: package builders,  Up: Installation

Support for the readline library
================================

   By default, chronyc is built to make use of the readline library.
This allows you to use the cursor keys to replay and edit old commands.
If you don't want to use readline (in which case chronyc will use a
minimal command line interface), invoke configure like this:

     ./configure --disable-readline other-options...

   If you have readline and/or ncurses installed in locations that
aren't normally searched by the compiler and linker, you need extra
options if you want readline to be used:

`--with-readline-includes=directory_name'
     This defines the name of the directory above the one where
     `readline.h' is.  `readline.h' is assumed to be in a `readline'
     subdirectory of the named directory.

`--with-readline-library=directory_name'
     This defines the directory containing the `libreadline.a' or
     `libreadline.so' file.

`--with-ncurses-library=directory_name'
     This defines the directory containing the `libncurses.a' or
     `libncurses.so' file.


File: chrony.info,  Node: package builders,  Prev: readline support,  Up: Installation

Extra options for package builders
==================================

   The configure and make procedures have some extra options that may
be useful if you are building a distribution package for chrony.

   The -infodir=DIR option to configure specifies a different install
directory for the info files.  This overrides the `info' subdirectory
of the argument to the -prefix option.  For example, you might use

     ./configure --prefix=/usr --infodir=/usr/share/info

   The -mandir=DIR option to configure specifies a different install
directory for the man pages.  This overrides the `man' subdirectory of
the argument to the -prefix option.

     ./configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man

   to set both options together.

   The final option is the DESTDIR option to the make command.  For
example, you could use the commands

     ./configure --prefix=/usr --infodir=/usr/share/info --mandir=/usr/share/man
     make all docs
     make install DESTDIR=./tmp
     cd tmp
     tar cvf - . | gzip -9 > chrony.tar.gz

   to build a package.  When untarred within the root directory, this
will install the files to the intended final locations.


File: chrony.info,  Node: Typical scenarios,  Next: Usage reference,  Prev: Installation,  Up: Top

Typical operating scenarios
***************************

* Menu:

* Computers on the net::        Your computer is permanently on the Internet (or on
                                a private network with NTP servers)
* Infrequent connection::       You connect to the Internet sometimes (e.g. via a modem)
* Isolated networks::           You have an isolated network with no reference clocks
* Dial-up home PCs::            Additional considerations if you turn your computer off
                                when it's not in use.
* Configuration options overview::  Overview of some configuration options.


File: chrony.info,  Node: Computers on the net,  Next: Infrequent connection,  Up: Typical scenarios

Computers connected to the internet
===================================

   In this section we discuss how to configure chrony for computers that
have permanent connections to the internet (or to any network
containing true NTP servers which ultimately derive their time from a
reference clock).

   To operate in this mode, you will need to know the names of the NTP
server machines you wish to use.  You may be able to find names of
suitable servers by one of the following methods:

   * Your institution may already operate servers on its network.
     Contact your system administrator to find out.

   * Your ISP probably has one or more NTP servers available for its
     customers.

   * Somewhere under the NTP homepage there is a list of public stratum
     1 and stratum 2 servers.  You should find one or more servers that
     are near to you -- check that their access policy allows you to
     use their facilities.

   Assuming that you have found some servers, you need to set up a
configuration file to run chrony.  The (compiled-in) default location
for this file is `/etc/chrony.conf'.  In the Debian package the
configuration files are in the directory `/etc/chrony'.  Assuming that
your ntp servers are called `a.b.c' and `d.e.f', your `chrony.conf'
file could contain as a minimum

     server a.b.c
     server d.e.f
     server g.h.i

   However, you will probably want to include some of the other
directives described later.  The following directives will be
particularly useful : `driftfile', `commandkey', `keyfile'.  The
smallest useful configuration file would look something like

     server a.b.c
     server d.e.f
     server g.h.i
     keyfile /etc/chrony.keys
     commandkey 1
     driftfile /etc/chrony.drift


File: chrony.info,  Node: Infrequent connection,  Next: Isolated networks,  Prev: Computers on the net,  Up: Typical scenarios

Infrequent connection to true NTP servers
=========================================

   In this section we discuss how to configure chrony for computers that
have occasional connections to the internet.

* Menu:

* Configuration for infrequent connections::  How to set up the `/etc/chrony' file
* Advising chronyd of internet availability::  How to tell chronyd when the link is available


File: chrony.info,  Node: Configuration for infrequent connections,  Next: Advising chronyd of internet availability,  Up: Infrequent connection

Setting up the configuration file for infrequent connections
------------------------------------------------------------

   As in the previous section, you will need access to NTP servers on
the internet.  The same remarks apply for how to find them.

   In this case, you will need some additional configuration to tell
`chronyd' when the connection to the internet goes up and down.  This
saves the program from continuously trying to poll the servers when
they are inaccessible.

   Again, assuming that your ntp servers are called `a.b.c' and
`d.e.f', your `chrony.conf' file would need to contain something like

     server a.b.c
     server d.e.f
     server g.h.i

   However, the following issues need to be addressed:

  1. Your computer probably doesn't have DNS access whilst offline to
     turn the machine names into IP addresses.

  2. Your computer will keep trying to contact the servers to obtain
     timestamps, even whilst offline.  If you operate a dial-on-demand
     system, things are even worse, because the link to the internet
     will keep getting established.

   For this reason, it would be better to specify this part of your
configuration file in the following way:

     server 1.2.3.4 offline
     server 5.6.7.8 offline
     server 9.10.11.12 offline

   Because numeric IP addresses have been used, the first problem is
overcome.  The `offline' keyword indicates that the servers start in an
offline state, and that they should not be contacted until `chronyd'
receives notification that the link to the internet is present.

   An alternative is to use the names of the NTP servers, and put
entries for them into your `/etc/hosts' file.  This will be OK as long
as `files' comes before `dns' in the `hosts' line of the
`/etc/nsswitch.conf' file.

   In order to notify `chronyd' of the presence of the link, you will
need to be able to log in to it with the program chronyc.  To do this,
`chronyd' needs to be configured with an administrator password.  The
Debian package puts a randomly generated key in
`/etc/chrony/chrony.keys'.  You should change it.  To set up an
administrator password, you can create a file `/etc/chrony.keys'
containing a single line

     1 xyzzy

   and add the following line to `/etc/chrony.conf' (the order of the
lines does not matter)

     commandkey 1

   The smallest useful configuration file would look something like

     server 1.2.3.4 offline
     server 5.6.7.8 offline
     server 9.10.11.12 offline
     keyfile /etc/chrony.keys
     commandkey 1
     driftfile /etc/chrony.drift

   The next section describes how to tell `chronyd' when the internet
link goes up and down.


File: chrony.info,  Node: Advising chronyd of internet availability,  Prev: Configuration for infrequent connections,  Up: Infrequent connection

How to tell chronyd when the internet link is available.
--------------------------------------------------------

   To use this option, you will need to configure a command key in
`chronyd's' configuration file `/etc/chrony.conf', as described in the
previous section.

   To tell `chronyd' when to start and finish sampling the servers, the
`online' and `offline' commands of chronyc need to be used.  To give an
example of their use, we assume that `pppd' is the program being used
to connect to the internet, and that chronyc has been installed at its
default location `/usr/local/bin/chronyc'.  We also assume that the
command key has been set up as described in the previous section.

   In the file `/etc/ppp/ip-up' we add the command sequence

     /usr/local/bin/chronyc <<EOF
     password xyzzy
     online
     EOF

   and in the file `/etc/ppp/ip-down' we add the sequence

     /usr/local/bin/chronyc <<EOF
     password xyzzy
     offline
     EOF

   The Debian package puts scripts similar to those above in the
directories `/etc/ppp/ip-up.d' and `/etc/ppp/ip-down.d'.

   `chronyd's' polling of the servers will now only occur whilst the
machine is actually connected to the Internet.


File: chrony.info,  Node: Isolated networks,  Next: Dial-up home PCs,  Prev: Infrequent connection,  Up: Typical scenarios

Isolated networks
=================

   In this section we discuss how to configure chrony for computers that
never have network conectivity to any computer which ultimately derives
its time from a reference clock.

   In this situation, one computer is selected to be the master
timeserver.  The other computers are either direct clients of the
master, or clients of clients.

   The rate value in the master's drift file needs to be set to the
average rate at which the master gains or loses time.  `chronyd'
includes support for this, in the form of the `manual' directive in the
configuration file and the `settime' command in the `chronyc' program.

   If the master is rebooted, `chronyd' can re-read the drift rate from
the drift file.  However, the master has no accurate estimate of the
current time.  To get around this, the system can be configured so that
the master can initially set itself to a `majority-vote' of selected
clients' times; this allows the clients to `flywheel' the master across
its outage.

   A typical configuration file for the master (called `master') might
be (assuming the clients are in the 192.168.165.x subnet and that the
master's address is 192.168.169.170)

     driftfile /etc/chrony.drift
     commandkey 25
     keyfile /etc/chrony.keys
     initstepslew 10 client1 client3 client6
     local stratum 8
     manual
     allow 192.168.165

   For the clients that have to resynchronise the master when it
restarts, the configuration file might be

     server master
     driftfile /etc/chrony.drift
     logdir /var/log/chrony
     log measurements statistics tracking
     keyfile /etc/chrony.keys
     commandkey 24
     local stratum 10
     initstepslew 20 master
     allow 192.168.169.170

   The rest of the clients would be the same, except that the `local'
and `allow' directives are not required.


File: chrony.info,  Node: Dial-up home PCs,  Next: Configuration options overview,  Prev: Isolated networks,  Up: Typical scenarios

The home PC with a dial-up connection
=====================================

* Menu:

* Dial-up overview::            General discussion of how the software operates in this mode
* Dial-up configuration::       Typical configuration files


File: chrony.info,  Node: Dial-up overview,  Next: Dial-up configuration,  Up: Dial-up home PCs

Assumptions/how the software works
----------------------------------

   This section considers the home computer which has a dial-up
connection.  It assumes that Linux is run exclusively on the computer.
Dual-boot systems may work; it depends what (if anything) the other
system does to the system's real-time clock.

   Much of the configuration for this case is discussed earlier (*note
Infrequent connection::).  This section addresses specifically the case
of a computer which is turned off between 'sessions'.

   In this case, `chronyd' relies on the computer's real-time clock
(RTC) to maintain the time between the periods when it is powered up.
The arrangement is shown in the figure below.

                 trim if required                          PSTN
           +---------------------------+               +----------+
           |                           |               |          |
           v                           |               |          |
     +---------+                    +-------+       +-----+     +---+
     | System's|  measure error/    |chronyd|       |modem|     |ISP|
     |real-time|------------------->|       |-------|     |     |   |
     |  clock  |   drift rate       +-------+       +-----+     +---+
     +---------+                       ^                          |
           |                           |                          |
           +---------------------------+                  --o-----o---
              set time at boot up                           |
                                                       +----------+
                                                       |NTP server|
                                                       +----------+

   When the computer is connected to the Internet (via the modem),
`chronyd' has access to external NTP servers which it makes
measurements from.  These measurements are saved, and straight-line fits
are performed on them to provide an estimate of the computer's time
error and rate of gaining/losing time.

   When the computer is taken offline from the Internet, the best
estimate of the gain/loss rate is used to free-run the computer until
it next goes online.

   Whilst the computer is running, `chronyd' makes measurements of the
real-time clock (RTC) (via the `/dev/rtc' interface, which must be
compiled into the kernel).  An estimate is made of the RTC error at a
particular RTC second, and the rate at which the RTC gains or loses time
relative to true time.

   The RTC is fully supported in 2.2 and 2.4 kernels.

   For kernels in the 2.0 series prior to 2.0.32, the kernel was set up
to trim the RTC every 11 minutes.  This would be disasterous for
`chronyd' - there is no reliable way of synchronising with this
trimming. For this reason, `chronyd' only supports the RTC in 2.0
kernels from v2.0.32 onwards.

   When the computer is powered down, the measurement histories for all
the NTP servers are saved to files (if the `dumponexit' directive is
specified in the configuration file), and the RTC tracking information
is also saved to a file (if the `rtcfile' directive has been
specified).  These pieces of information are also saved if the `dump'
and `writertc' commands respectively are issued through `chronyc'.

   When the computer is rebooted, `chronyd' reads the current RTC time
and the RTC information saved at the last shutdown.  This information is
used to set the system clock to the best estimate of what its time would
have been now, had it been left running continuously.  The measurement
histories for the servers are then reloaded.

   The next time the computer goes online, the previous sessions'
measurements can contribute to the line-fitting process, which gives a
much better estimate of the computer's gain/loss rate.

   One problem with saving the measurements and RTC data when the
machine is shut down is what happens if there is a power failure; the
most recent data will not be saved.  Although `chronyd' is robust enough
to cope with this, some performance may be lost.  (The main danger
arises if the RTC has been changed during the session, with the
`trimrtc' command in `chronyc'.  Because of this, `trimrtc' will make
sure that a meaningful RTC file is saved out after the change is
completed).

   The easiest protection against power failure is to put the `dump'
and `writertc' commands in the same place as the `offline' command is
issued to take `chronyd' offline; because `chronyd' free-runs between
online sessions, no parameters will change significantly between going
offline from the Internet and any power failure.

   A final point regards home computers which are left running for
extended periods and where it is desired to spin down the hard disc
when it is not in use (e.g. when not accessed for 15 minutes).
`chronyd' has been planned so it supports such operation; this is the
reason why the RTC tracking parameters are not saved to disc after
every update, but only when the user requests such a write, or during
the shutdown sequence.  The only other facility that will generate
periodic writes to the disc is the `log rtc' facility in the
configuration file; this option should not be used if you want your
disc to spin down.


File: chrony.info,  Node: Dial-up configuration,  Prev: Dial-up overview,  Up: Dial-up home PCs

Typical configuration files.
----------------------------

   To illustrate how a dial-up home computer might be configured,
example configuration files are shown in this section.

   For the `/etc/chrony.conf' file, the following can be used as an
example.  _NOTE : The `server' directives are only applicable to
customers of Demon Internet; users of other ISPs will need to use their
own ISP's NTP servers or public NTP servers._

     server 158.152.1.65 minpoll 5 maxpoll 10 maxdelay 0.4 offline
     server 158.152.1.76 minpoll 5 maxpoll 10 maxdelay 0.4 offline
     server 194.159.253.2 minpoll 5 maxpoll 10 maxdelay 0.4 offline
     logdir /var/log/chrony
     log statistics measurements tracking
     driftfile /etc/chrony.drift
     keyfile /etc/chrony.keys
     commandkey 25
     maxupdateskew 100.0
     dumponexit
     dumpdir /var/log/chrony
     rtcfile /etc/chrony.rtc

   With Freeserve as the ISP, I use the following server lines :

     server 194.152.64.68 minpoll 5 maxpoll 10 maxdelay 0.4 offline
     server 194.152.64.35 minpoll 5 maxpoll 10 maxdelay 0.4 offline
     server 194.152.64.34 minpoll 5 maxpoll 10 maxdelay 0.4 offline

   I use `pppd' for connecting to my ISP.  This runs two scripts
`/etc/ppp/ip-up' and `/etc/ppp/ip-down' when the link goes online and
offline respectively.

   The relevant part of the `/etc/ppp/ip-up' file is (with a dummy
password)

     /usr/local/bin/chronyc <<EOF
     password xxxxxxxx
     online
     EOF

   and the relevant part of the `/etc/ppp/ip-down' script is

     /usr/local/bin/chronyc <<EOF
     password xxxxxxxx
     offline
     dump
     writertc
     EOF

   (Because they have to contain the administrator password, it would be
desirable to make the files readable only by root on a multiuser
machine).

   To start `chronyd' during the boot sequence, I have the following in
`/etc/rc.d/rc.local' (this is a Slackware system)

     if [ -f /usr/local/sbin/chronyd -a -f /etc/chrony.conf ]; then
       /usr/local/sbin/chronyd -r -s
       echo "Start chronyd"
     fi

   The Debian package puts a script which handles this and shutdown in
`/etc/init.d/chrony'.

   The placement of this command may be important on some systems.  In
particular, `chronyd' may need to be started several seconds (about 10
as a minimum) before any software that depends on the system clock not
jumping or moving backwards, depending on the directives in `chronyd's'
configuration file.

   For the system shutdown, `chronyd' should receive a SIGTERM several
seconds before the final SIGKILL; the SIGTERM causes the measurement
histories and RTC information to be saved out.  There should be no need
to add anything to the shutdown sequence, unless (as my system had)
there is no pause between the SIGTERM and SIGKILL being delivered to the
remaining processes.  So if you find something like

     killall5 -15
     killall5 -9

   in your `/etc/rc.d/rc.0' script, you will need to insert a sleep,
e.g.

     killall5 -15
     sleep 5
     killall5 -9

   Otherwise, `chronyd' will not always save information on shutdown,
which could be a problem if you don't use `dump' and `writertc' when
you go offline.


File: chrony.info,  Node: Configuration options overview,  Prev: Dial-up home PCs,  Up: Typical scenarios

Other important configuration options
=====================================

   The most common option to include in the configuration file is the
`driftfile' option.  One of the major tasks of `chronyd' is to work out
how fast or how slow the system clock runs relative to real time - e.g.
in terms of seconds gained or lost per day.  Measurements over a long
period are usually required to refine this estimate to an acceptable
degree of accuracy.  Therefore, it would be bad if `chronyd' had to
work the value out each time it is restarted, because the system clock
would not run so accurately whilst the determination is taking place.

   To avoid this problem, `chronyd' allows the gain or loss rate to be
stored in a file, which can be read back in when the program is
restarted.  This file is called the drift file, and might typically be
stored in `/etc/chrony.drift'.  By specifying an option like the
following

     driftfile /etc/chrony.drift

   in the configuration file (`/etc/chrony.conf'), the drift file
facility will be activated.


File: chrony.info,  Node: Usage reference,  Next: Porting guide,  Prev: Typical scenarios,  Up: Top

Usage reference
***************

* Menu:

* Starting chronyd::            Command line options for the daemon
* Configuration file::          Format of the configuration file
* Running chronyc::             The run-time configuration program


File: chrony.info,  Node: Starting chronyd,  Next: Configuration file,  Up: Usage reference

Starting chronyd
================

   If `chronyd' has been installed to its default location
`/usr/local/sbin/chronyd', starting it is simply a matter of entering
the command

     /usr/local/sbin/chronyd

   The Debian package uses `/usr/sbin/chronyd'.

   Information messages and warnings will be logged to syslog.

   The command line options supported are as follows:

`-d'
     When run in this mode, the program will not detach itself from the
     terminal, and all messages will be sent to the terminal instead of
     to syslog.

`-f <conf-file>'
     This option can be used to specify an alternate location for the
     configuration file (default `/etc/chrony.conf').

`-r'
     This option will reload sample histories for each of the servers
     being used.  These histories are created by using the `dump'
     command in `chronyc', or by setting the `dumponexit' directive in
     the configuration file.  This option is useful if you want to stop
     and restart `chronyd' briefly for any reason, e.g. to install a new
     version.  However, it only makes sense on systems where the kernel
     can maintain clock compensation whilst not under `chronyd's'
     control.  The only version where this happens so far is Linux.  On
     systems where this is not the case, e.g. Solaris and SunOS the
     option should not be used.

`-s'
     This option will set the system clock from the computer's real-time
     clock.  This is analogous to supplying the `-s' flag to the
     `/sbin/clock' program during the Linux boot sequence.

     Support for real-time clocks is limited at present - the criteria
     are described in the section on the `rtcfile' directive (*note
     rtcfile directive::).

     If `chronyd' cannot support the real time clock on your computer,
     this option cannot be used and a warning message will be logged to
     the syslog.

     If used in conjunction with the `-r' flag, `chronyd' will attempt
     to preserve the old samples after setting the system clock from
     the real time clock.  This can be used to allow `chronyd' to
     perform long term averaging of the gain or loss rate across system
     reboots, and is useful for dial-up systems that are shut down when
     not in use.  For this to work well, it relies on `chronyd' having
     been able to determine accurate statistics for the difference
     between the real time clock and system clock last time the
     computer was on.

`-v'
     This option displays `chronyd's' version number to the terminal and
     exits.

   On systems that support an `/etc/rc.local' file for starting
programs at boot time, `chronyd' can be started from there.

   On systems with a System V style initialisation (e.g. Solaris), a
suitable start/stop script might be as shown below.  This might be
placed in the file `/etc/rc2.d/S83chrony'.

     #!/bin/sh
     # This file should have uid root, gid sys and chmod 744
     #
     
     killproc() {            # kill the named process(es)
             pid=`/usr/bin/ps -e |
                  /usr/bin/grep -w $1 |
                  /usr/bin/sed -e 's/^  *//' -e 's/ .*//'`
             [ "$pid" != "" ] && kill $pid
     }
     
     case "$1" in
     
     'start')
        if [ -f /opt/free/sbin/chronyd -a -f /etc/chrony.conf ]; then
          /opt/free/sbin/chronyd
        fi
        ;;
     'stop')
        killproc chronyd
        ;;
     *)
        echo "Usage: /etc/rc2.d/S83chrony { start | stop }"
        ;;
     esac

   (In both cases, you may want to bear in mind that `chronyd' can step
the time when it starts.  There may be other programs started at boot
time that could be upset by this, so you may need to consider the
ordering carefully.  However, `chronyd' will need to start after
daemons providing services that it may require, e.g. the domain name
service.)


File: chrony.info,  Node: Configuration file,  Next: Running chronyc,  Prev: Starting chronyd,  Up: Usage reference

The chronyd configuration file
==============================

   The configuration file is normally called `/etc/chrony.conf'; in
fact, this is the compiled-in default. However, other locations can be
specified with a command line option.

   Each command in the configuration file is placed on a separate line.
The following sections describe each of the commands in turn.  The
directives can occur in any order in the file.

* Menu:

* comments in config file::     How to write a comment
* acquisitionport directive::   Set port to use for initial time probes
* allow directive::             Give access to NTP clients
* bindaddress directive::       Limit the network interface that is used for NTP
* bindcmdaddress directive::    Limit the network interface that is used for commands
* broadcast directive::         Make chronyd act as an NTP broadcast server
* cmdallow directive::          Give control access to chronyc on other computers
* cmddeny directive::           Deny control access to chronyc on other computers
* commandkey directive::        Set runtime command key
* cmdport directive::           Set port to use for runtime commanding
* deny directive::              Deny access to NTP clients
* driftfile directive::         Specify location of file containing drift data
* dumpdir directive::           Specify directory for dumping measurements
* dumponexit directive::        Dump measurements when daemon exits
* initstepslew directive::      Trim the system clock on boot-up.
* keyfile directive::           Specify location of file containing keys
* linux_hz directive::          Define a non-standard value of the kernel HZ constant
* linux_freq_scale directive::  Define a non-standard value to compensate the kernel frequency bias
* local directive::             Allow unsynchronised machine to act as server
* log directive::               Make daemon log certain sets of information
* logchange directive::         Generate syslog messages if large offsets occur
* logdir directive::            Specify directory for logging
* mailonchange directive::      Send email if a clock correction above a threshold occurs
* manual directive::            Allow manual entry using chronyc's settime cmd.
* maxupdateskew directive::     Stop bad estimates upsetting machine clock
* noclientlog directive::       Prevent chronyd from gathering data about clients
* peer directive::              Specify an NTP peer
* pidfile directive::           Specify the file where chronyd's pid is written
* port directive::              Set port to use for NTP packets
* rtcdevice directive::         Specify name of enhanced RTC device (if not /dev/rtc)
* rtcfile directive::           Specify the file where real-time clock data is stored
* rtconutc directive::          Specify that the real time clock keeps UTC not local time
* server directive::            Specify an NTP server


File: chrony.info,  Node: comments in config file,  Next: acquisitionport directive,  Up: Configuration file

Comments in the configuration file
----------------------------------

   The configuration file may contain comment lines.  A comment line is
any line that starts with zero or more spaces followed by any one of
the following characters:
   * !

   * ;

   * #

   * %
   Any line with this format will be ignored.


File: chrony.info,  Node: acquisitionport directive,  Next: allow directive,  Prev: comments in config file,  Up: Configuration file

acquisitionport
---------------

   `chronyd' uses a separate client-side port for the rapid-fire
measurements requested with the `initstepslew' directive (*note
initstepslew directive::).  Normally, that port is chosen arbitrarily
by the operating system.  However, you can use `acquisitionport' to
explicitly specify a port.  This may be useful for getting through
firewalls.

   Do not make acquisition and regular NTP service (*note port
directive::) use the same port.

   An example of the `acquisitionport' command is

     acquisitionport 1123

   This would change the port used for rapid queries to udp/1123.  You
could then persuade the firewall administrator to let that port through.

